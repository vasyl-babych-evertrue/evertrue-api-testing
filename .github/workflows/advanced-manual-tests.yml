name: Advanced Manual Test Runner

on:
  workflow_dispatch:
    inputs:
      test_path:
        description: 'Шлях до тестів (наприклад: tests/auth або tests/auth/auth-session.spec.ts)'
        required: true
        type: string
        default: 'tests/auth'
      
      environment:
        description: 'Оточення для тестування'
        required: true
        type: choice
        default: 'stage'
        options:
          - 'stage'
          - 'production'
      
      browser:
        description: 'Браузер для тестів'
        required: false
        type: choice
        default: 'chromium'
        options:
          - 'chromium'
          - 'firefox'
          - 'webkit'
          - 'all'
      
      headed:
        description: 'Запустити в headed режимі (з UI)'
        required: false
        type: boolean
        default: false
      
      debug:
        description: 'Debug режим (детальні логи)'
        required: false
        type: boolean
        default: false
      
      retries:
        description: 'Кількість повторних спроб при падінні тесту'
        required: false
        type: number
        default: 0
      
      grep:
        description: 'Фільтр тестів (regex pattern, наприклад: "should create")'
        required: false
        type: string
        default: ''

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright Browsers
        run: |
          if [ "${{ inputs.browser }}" = "all" ]; then
            npx playwright install --with-deps
          else
            npx playwright install --with-deps ${{ inputs.browser }}
          fi

      - name: 🧪 Run tests
        run: |
          CMD="npx playwright test ${{ inputs.test_path }}"
          
          # Додаємо browser
          if [ "${{ inputs.browser }}" != "all" ]; then
            CMD="$CMD --project=${{ inputs.browser }}"
          fi
          
          # Додаємо headed режим
          if [ "${{ inputs.headed }}" = "true" ]; then
            CMD="$CMD --headed"
          fi
          
          # Додаємо debug
          if [ "${{ inputs.debug }}" = "true" ]; then
            CMD="$CMD --debug"
          fi
          
          # Додаємо retries
          if [ "${{ inputs.retries }}" != "0" ]; then
            CMD="$CMD --retries=${{ inputs.retries }}"
          fi
          
          # Додаємо grep фільтр
          if [ -n "${{ inputs.grep }}" ]; then
            CMD="$CMD --grep='${{ inputs.grep }}'"
          fi
          
          # Додаємо reporter
          CMD="$CMD --reporter=html,list"
          
          echo "Executing: $CMD"
          eval $CMD
        env:
          ENVIRONMENT: ${{ inputs.environment }}
          SUPER_ADMIN_EMAIL: ${{ secrets.SUPER_ADMIN_EMAIL }}
          SUPER_ADMIN_PASSWORD: ${{ secrets.SUPER_ADMIN_PASSWORD }}
          REGULAR_USER_EMAIL: ${{ secrets.REGULAR_USER_EMAIL }}
          REGULAR_USER_PASSWORD: ${{ secrets.REGULAR_USER_PASSWORD }}

      - name: 📊 Upload HTML Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ inputs.environment }}-${{ github.run_number }}
          path: playwright-report/
          retention-days: 30

      - name: 📄 Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ inputs.environment }}-${{ github.run_number }}
          path: test-results/
          retention-days: 30

      - name: 📊 Generate Test Summary
        if: always()
        run: |
          echo "## 🧪 Test Execution Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Configuration" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Test Path | \`${{ inputs.test_path }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | \`${{ inputs.environment }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Browser | \`${{ inputs.browser }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Headed Mode | \`${{ inputs.headed }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Debug Mode | \`${{ inputs.debug }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Retries | \`${{ inputs.retries }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Grep Filter | \`${{ inputs.grep }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Run Number | #${{ github.run_number }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📥 Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- HTML Report: \`playwright-report-${{ inputs.environment }}-${{ github.run_number }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Test Results: \`test-results-${{ inputs.environment }}-${{ github.run_number }}\`" >> $GITHUB_STEP_SUMMARY

      - name: 💬 Comment on commit (if triggered from PR)
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let comment = `## 🧪 Manual Test Run Results\n\n`;
            comment += `**Test Path:** \`${{ inputs.test_path }}\`\n`;
            comment += `**Environment:** \`${{ inputs.environment }}\`\n`;
            comment += `**Browser:** \`${{ inputs.browser }}\`\n`;
            comment += `**Status:** ${{ job.status }}\n\n`;
            comment += `[View Full Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
