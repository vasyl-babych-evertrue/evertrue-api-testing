{
	"info": {
		"_postman_id": "f5c4aa55-b274-455c-8f52-6c60a3aee17c",
		"name": "Vasyl test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42494781",
		"_collection_link": "https://evertrue-team.postman.co/workspace/Evertrue-Workspace~ff84f156-4fa0-40eb-b4fc-9b698b170dcf/collection/42494781-f5c4aa55-b274-455c-8f52-6c60a3aee17c?action=share&source=collection_link&creator=42494781"
	},
	"item": [
		{
			"name": "OAuth Copy",
			"item": [
				{
					"name": "API Status",
					"item": [
						{
							"name": "Auth Prime Token auth_api YK",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"pm.environment.set(\"session_prime_token\", jsonData.prime_token);\r",
											"pm.environment.set(\"auth_token\", jsonData.token);\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "p0o9P)O(p0o9P)O(",
											"type": "string"
										},
										{
											"key": "username",
											"value": "vasyl.babych@evertrue.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueBasicAuth",
										"type": "text"
									},
									{
										"key": "host",
										"value": "stage-api.evertrue.com",
										"type": "text"
									},
									{
										"key": "Device-ID",
										"value": "a4ffbd49f46914ab81c1b8262c8a246ce6c303870752493c439f715a0a20c4a1",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/session",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"session"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get the current session",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"currentSessionSchema\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/session",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Ok\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"ok\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.evertrue.com/auth/status",
									"protocol": "https",
									"host": [
										"api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "Options",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "p0o9P)O(p0o9P)O(",
											"type": "string"
										},
										{
											"key": "username",
											"value": "vasyl.babych@evertrue.com",
											"type": "string"
										}
									]
								},
								"method": "OPTIONS",
								"header": [],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy a session (log out)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/session",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"session"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Session",
					"item": [
						{
							"name": "Auth Prime Token auth_api Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"auth_token\", jsonData.token);\r",
											"\r",
											"pm.environment.set(\"session_prime_token\", jsonData.prime_token);\r",
											"pm.environment.set(\"Device-ID\", jsonData.device_id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "p0o9P)O(p0o9P)O(",
											"type": "string"
										},
										{
											"key": "username",
											"value": "vasyl.babych@evertrue.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueBasicAuth",
										"type": "text"
									},
									{
										"key": "host",
										"value": "stage-api.evertrue.com",
										"type": "text"
									},
									{
										"key": "Device-ID",
										"value": "{{Device-ID}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/session",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"session"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a session (login)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let loginResponseSchema = JSON.parse(pm.variables.get(\"loginSessionSchema\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(loginResponseSchema);\r",
											"});\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"pm.environment.set(\"session_auth_token\", jsonData.token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization-Provider",
										"value": " EvertruePrimeToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{session_prime_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "89567e74bec3afafc5f46db72b1a9323f41858256e3bec5dc9e522a7b3f3518f",
										"type": "text"
									},
									{
										"key": "Device-ID",
										"value": "{{Device-ID}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{et_host}}/auth/session",
									"host": [
										"{{et_host}}"
									],
									"path": [
										"auth",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get the current session",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"currentSessionSchema\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{session_auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "89567e74bec3afafc5f46db72b1a9323f41858256e3bec5dc9e522a7b3f3518f",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{et_host}}/auth/session",
									"host": [
										"{{et_host}}"
									],
									"path": [
										"auth",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy a session (log out)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{session_auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "89567e74bec3afafc5f46db72b1a9323f41858256e3bec5dc9e522a7b3f3518f",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{et_host}}/auth/session",
									"host": [
										"{{et_host}}"
									],
									"path": [
										"auth",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get the current session after log out",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"error\": { \"type\": \"string\" }\r",
											"  },\r",
											"  \"required\": [\"error\"]\r",
											"};\r",
											"\r",
											"// Validate response body\r",
											"pm.test(\"Response schema is valid\", function () {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "MTM1MTY5OmF0RkhlUU5TTkRfdm9Kc2Jlckw5",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "89567e74bec3afafc5f46db72b1a9323f41858256e3bec5dc9e522a7b3f3518f",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{et_host}}/auth/session",
									"host": [
										"{{et_host}}"
									],
									"path": [
										"auth",
										"session"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Link Tokens",
					"item": [
						{
							"name": "Create a Link Token (application endpoint)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let linkTokenSchema = JSON.parse(pm.variables.get(\"postLinkTokensSchema\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(linkTokenSchema);\r",
											"});\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"pm.environment.set(\"link_token\", jsonData.token);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": " application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "MzI6X0ZrcW9mWktZS2YzelZHc01FRXc=",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": " EvertrueAppToken",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"application\": \"volunteers\",\r\n    \"user_id\": 2303\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/link_tokens",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"link_tokens"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Exchange an expired Link Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": " application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": " application/json",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "MzI6X0ZrcW9mWktZS2YzelZHc01FRXc=",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": " EvertrueAppToken",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"application\": \"volunteers\",\r\n    \"token\": \"{{link_token}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/link_tokens",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"link_tokens"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login Management",
					"item": [
						{
							"name": "Auth Prime Token auth_api Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"auth_token\", jsonData.token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "p0o9P)O(p0o9P)O(",
											"type": "string"
										},
										{
											"key": "username",
											"value": "vasyl.babych@evertrue.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueBasicAuth",
										"type": "text"
									},
									{
										"key": "host",
										"value": "stage-api.evertrue.com",
										"type": "text"
									},
									{
										"key": "Device-ID",
										"value": "{{Device-ID}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/session",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"session"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List all active logins for the current user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let activeLogginsSchema = JSON.parse(pm.variables.get(\"logginsSchema\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(activeLogginsSchema);\r",
											"});\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"pm.environment.set(\"login_key\", jsonData.find(item => item.is_current === true).key);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "89567e74bec3afafc5f46db72b1a9323f41858256e3bec5dc9e522a7b3f3518f",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/settings/logins",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"settings",
										"logins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a single login by key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"singleLogginsSchema\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "89567e74bec3afafc5f46db72b1a9323f41858256e3bec5dc9e522a7b3f3518f",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/settings/logins/{{login_key}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"settings",
										"logins",
										"{{login_key}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Terminate a login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "89567e74bec3afafc5f46db72b1a9323f41858256e3bec5dc9e522a7b3f3518f",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/settings/logins/{{login_key}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"settings",
										"logins",
										"{{login_key}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Users",
					"item": [
						{
							"name": "Auth Prime Token auth_api Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"auth_token\", jsonData.token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "p0o9P)O(p0o9P)O(",
											"type": "string"
										},
										{
											"key": "username",
											"value": "vasyl.babych@evertrue.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueBasicAuth",
										"type": "text"
									},
									{
										"key": "host",
										"value": "stage-api.evertrue.com",
										"type": "text"
									},
									{
										"key": "Device-ID",
										"value": "{{Device-ID}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/session",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"session"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get logged in user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"getLoggedInUserSchema\"));\r",
											"    \r",
											"    pm.expect(pm.response.json()).to.be.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/users/me?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"users",
										"me"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"getUserByIdSchema\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/users/2304?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"users",
										"2304"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user by ID (super-user version)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"getUserMeS-U\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/users/id/2323?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"users",
										"id",
										"2323"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user by email (super-user endpoint)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"getUserMe-email\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/users/email/vasyl.babych@evertrue.com?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"users",
										"email",
										"vasyl.babych@evertrue.com"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user by contact ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"getUserByIdSchema\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/users/contact_id/14623853?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"users",
										"contact_id",
										"14623853"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List users by role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"listUsersByRoleSchema\"));\r",
											"        \r",
											"    pm.expect(pm.response.json()).to.be.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/users/?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}&role=1619",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"users",
										""
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										},
										{
											"key": "role",
											"value": "1619"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Bulk fetch users by IDs, roles, contact IDs, names, or emails",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"bulkFetchUsersSchema\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": [2323, 2303, 2322, 2308, 2304],\r\n  //\"contact_id\":[14623853],\r\n  //\"name_or_email\": \"andriy.borovyi@evertrue.com\",\r\n  \"role\": [1615, 1616, 1617, 1618, 1619, 1620, 1621],\r\n  \"role_name\": [\"Volunteer Lead\", \"GivingTree Owner\", \"Volunteer\", \"Alumni\", \"GivingTree User\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/users/bulk_fetch?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"users",
										"bulk_fetch"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a user (super-admin endpoint)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"getUserMe\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Vasyl Swan {{$randomLastName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/users/2323?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}&role=1619",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"users",
										"2323"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										},
										{
											"key": "role",
											"value": "1619"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"getUserNotSuper\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/users/2323?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"users",
										"2323"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a user (super-admin endpoint)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"newUserSchema\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"user_id_to_delete\", jsonData.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"affiliations\": [\r\n        {\r\n            \"organization_id\": 463,\r\n            \"contact_id\": null,\r\n            \"role_ids\": [\r\n                1619\r\n            ]\r\n        }\r\n    ],\r\n    \"email\": \"{{$randomFirstName}}{{$randomAlphaNumeric}}@evertrue.com\",\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"super_user\": false,\r\n    \"email_locked\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/users?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"users"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a user (super-admin endpoint)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"affiliations\": [\r\n        {\r\n            \"organization_id\": 463,\r\n            \"contact_id\": null,\r\n            \"role_ids\": [\r\n                1619\r\n            ]\r\n        }\r\n    ],\r\n    \"email\": \"{{$randomFirstName}}{{$randomAlphaNumeric}}@evertrue.com\",\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"super_user\": false,\r\n    \"email_locked\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/users/{{user_id_to_delete}}?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"users",
										"{{user_id_to_delete}}"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Auth Giventree not super Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"auth_token\", jsonData.token);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "p0o9P)O(",
											"type": "string"
										},
										{
											"key": "username",
											"value": "vasyl.babych+3@swanteams.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{app_key_givingtree}}",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueBasicAuth",
										"type": "text"
									},
									{
										"key": "host",
										"value": "stage-api.evertrue.com",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Device-ID",
										"value": "{{Device-ID}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/session",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"session"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Bulk fetch users by IDs, roles, contact IDs, names, or emails Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"bulkFetchUsersSchema\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": [2323, 2303, 2322, 2308, 2304],\r\n  //\"contact_id\":[14623853],\r\n  //\"name_or_email\": \"andriy.borovyi@evertrue.com\",\r\n  \"role\": [1615, 1616, 1617, 1618, 1619, 1620, 1621],\r\n  \"role_name\": [\"Volunteer Lead\", \"GivingTree Owner\", \"Volunteer\", \"Alumni\", \"GivingTree User\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/users/bulk_fetch?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"users",
										"bulk_fetch"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Users Search",
					"item": [
						{
							"name": "Auth Prime Token auth_api Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"auth_token\", jsonData.token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "p0o9P)O(p0o9P)O(",
											"type": "string"
										},
										{
											"key": "username",
											"value": "vasyl.babych@evertrue.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueBasicAuth",
										"type": "text"
									},
									{
										"key": "host",
										"value": "stage-api.evertrue.com",
										"type": "text"
									},
									{
										"key": "Device-ID",
										"value": "{{Device-ID}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/session",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"session"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Basic Users Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"userSearchSchema\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"must\": [{\r\n    \"email\": {\r\n      \"wildcard\": \"vasyl*\"\r\n    }\r\n  }]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/users/search?app_key={{app_key_givingtree}}&auth={{auth_token}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"users",
										"search"
									],
									"query": [
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cross-org Email Users Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"userSearchSchema\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"must\": [{\r\n    \"email\": {\r\n      \"wildcard\": \"*@swanteams.com\"\r\n    }\r\n  }]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/users/search?app_key={{app_key_givingtree}}&auth={{auth_token}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"users",
										"search"
									],
									"query": [
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Sorted Users Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"userSearchSchema\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"must\": [{\r\n    \"email\": {\r\n      \"wildcard\": \"*@swanteams.com\"\r\n    }\r\n  }],\r\n  \"sort\": [\r\n    {\r\n      \"name\": {\r\n        \"order\": \"asc\"\r\n      }\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/users/search?app_key={{app_key_givingtree}}&auth={{auth_token}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"users",
										"search"
									],
									"query": [
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Role Filtered Users Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"userSearchRoleSchema\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"must\": [\r\n    {\r\n      \"affiliations.affiliation_roles.role_id\": {\r\n        \"match\": 1616\r\n      }\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/users/search?app_key={{app_key_givingtree}}&auth={{auth_token}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"users",
										"search"
									],
									"query": [
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Roles",
					"item": [
						{
							"name": "Auth Prime Token auth_api Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"auth_token\", jsonData.token);\r",
											"\r",
											"pm.environment.set(\"session_prime_token\", jsonData.prime_token);\r",
											"pm.environment.set(\"Device-ID\", jsonData.device_id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "p0o9P)O(p0o9P)O(",
											"type": "string"
										},
										{
											"key": "username",
											"value": "vasyl.babych@evertrue.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueBasicAuth",
										"type": "text"
									},
									{
										"key": "host",
										"value": "stage-api.evertrue.com",
										"type": "text"
									},
									{
										"key": "Device-ID",
										"value": "{{Device-ID}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/session",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"session"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all roles for the organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"        pm.test(\"Response matches the expected schema\", function () {\r",
											"           let getRolesSchema = JSON.parse(pm.variables.get(\"getRoles\"))\r",
											"                \r",
											"               pm.response.to.have.jsonSchema(getRolesSchema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/roles?oid=463",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"roles"
									],
									"query": [
										{
											"key": "oid",
											"value": "463"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a single role by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let getRoleSchema = JSON.parse(pm.variables.get(\"getRoleId\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(getRoleSchema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/roles/1619?oid=463",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"roles",
										"1619"
									],
									"query": [
										{
											"key": "oid",
											"value": "463"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a new role for the organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let getRoleSchema = JSON.parse(pm.variables.get(\"getRoleId\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(getRoleSchema);\r",
											"});\r",
											"\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"roleId\", jsonData.id);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"can_see_private_data\": true,\r\n    \"default\": false,\r\n    \"name\": \"Role_{{$randomLastName}}\",\r\n    \"remote_id\": \"Role_{{$randomLastName}}\"\r\n}\r\n\r\n// can delete orgs 1675",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/roles?oid=463",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"roles"
									],
									"query": [
										{
											"key": "oid",
											"value": "463"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"can_see_private_data\": true,\r\n    \"default\": false,\r\n    \"name\": \"Role_{{$randomLastName}}\",\r\n    \"remote_id\": \"Role_{{$randomLastName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/roles/{{roleId}}?oid=463",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"roles",
										"{{roleId}}"
									],
									"query": [
										{
											"key": "oid",
											"value": "463"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a single role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/roles/{{roleId}}?oid=463",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"roles",
										"{{roleId}}"
									],
									"query": [
										{
											"key": "oid",
											"value": "463"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Organizations",
					"item": [
						{
							"name": "Auth Prime Token auth_api",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"auth_token\", jsonData.token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "p0o9P)O(p0o9P)O(",
											"type": "string"
										},
										{
											"key": "username",
											"value": "vasyl.babych@evertrue.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueBasicAuth",
										"type": "text"
									},
									{
										"key": "host",
										"value": "stage-api.evertrue.com",
										"type": "text"
									},
									{
										"key": "Device-ID",
										"value": "{{Device-ID}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/session",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"session"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a new organization (super admin endpoint)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"newOrganizationSchema\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"new_organization_id\", jsonData.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomFullName}} {{$randomAlphaNumeric}}\",\r\n    \"slug\": \"test-{{$randomAlphaNumeric}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/organizations",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update an existing organization (super admin endpoint)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomFullName}} {{$randomAlphaNumeric}} -updated\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/organizations/{{new_organization_id}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"organizations",
										"{{new_organization_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all organizations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let allOrganizationsSchema = JSON.parse(pm.variables.get(\"allOrganizations\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(allOrganizationsSchema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/organizations",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get an organization by its slug",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let slugOrganizationSchema = JSON.parse(pm.variables.get(\"slugOrganization\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(slugOrganizationSchema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "MTMzOTYxOlROaUpRRHVQNkU5OXU3LURKanNV",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/organizations/slug/swan",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"organizations",
										"slug",
										"swan"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get an organization by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let idOrganizationSchema = JSON.parse(pm.variables.get(\"idOrganization\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(idOrganizationSchema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/organizations/463",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"organizations",
										"463"
									]
								}
							},
							"response": []
						},
						{
							"name": "Auth Giventree not super Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"auth_token\", jsonData.token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "p0o9P)O(",
											"type": "string"
										},
										{
											"key": "username",
											"value": "vasyl.babych+3@swanteams.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueBasicAuth",
										"type": "text"
									},
									{
										"key": "host",
										"value": "stage-api.evertrue.com",
										"type": "text"
									},
									{
										"key": "Device-ID",
										"value": "{{Device-ID}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/session",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"session"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all organizations Not super",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"allOrganizationsNotSuper1\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/organizations",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"organizations"
									]
								}
							},
							"response": [
								{
									"name": "Get all organizations Not super",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization-Provider",
												"value": "EvertrueAuthToken",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{auth_token}}",
												"type": "text"
											},
											{
												"key": "Application-Key",
												"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
												"type": "text"
											}
										],
										"url": {
											"raw": "https://stage-api.evertrue.com/auth/organizations",
											"protocol": "https",
											"host": [
												"stage-api",
												"evertrue",
												"com"
											],
											"path": [
												"auth",
												"organizations"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": null,
									"header": [
										{
											"key": "Date",
											"value": "Tue, 26 Aug 2025 08:44:52 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Status",
											"value": "200 OK"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000; includeSubDomains;"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Request-Id",
											"value": "9b3423b4-54f6-460b-85df-1d671c8d04eb"
										},
										{
											"key": "X-Runtime",
											"value": "0.235123"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Powered-By",
											"value": "Phusion Passenger(R)"
										},
										{
											"key": "Server",
											"value": "nginx + Phusion Passenger(R)"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										}
									],
									"cookie": [],
									"body": "[\n    {\n        \"id\": 1,\n        \"name\": \"EverTrue\",\n        \"slug\": \"evertrue\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1383056489000,\n        \"updated_at\": 1582903706000\n    },\n    {\n        \"id\": 2,\n        \"name\": \"GivingTree Demo\",\n        \"slug\": \"gtdemo\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1383056489000,\n        \"updated_at\": 1383056489000\n    },\n    {\n        \"id\": 3,\n        \"name\": null,\n        \"slug\": \"mosesbrown\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1383058328000,\n        \"updated_at\": 1383058328000\n    },\n    {\n        \"id\": 4,\n        \"name\": null,\n        \"slug\": \"brownu\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1383319167000,\n        \"updated_at\": 1383319167000\n    },\n    {\n        \"id\": 5,\n        \"name\": null,\n        \"slug\": \"evertrueu\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1383596797000,\n        \"updated_at\": 1383596797000\n    },\n    {\n        \"id\": 6,\n        \"name\": \"Amherst College\",\n        \"slug\": \"amherst\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1385062632000,\n        \"updated_at\": 1390514975000\n    },\n    {\n        \"id\": 7,\n        \"name\": null,\n        \"slug\": \"sidwell\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1385483232000,\n        \"updated_at\": 1385483232000\n    },\n    {\n        \"id\": 8,\n        \"name\": null,\n        \"slug\": \"stmarksschool\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1385491791000,\n        \"updated_at\": 1385491791000\n    },\n    {\n        \"id\": 9,\n        \"name\": \"mark-evertrue-dev\",\n        \"slug\": \"marktest\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1385844331000,\n        \"updated_at\": 1385844331000\n    },\n    {\n        \"id\": 12,\n        \"name\": \"pj3-evertrue-dev\",\n        \"slug\": \"pjtest3\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1386030508000,\n        \"updated_at\": 1587143178000\n    },\n    {\n        \"id\": 13,\n        \"name\": \"capi-int-test-evertrue-dev\",\n        \"slug\": \"capi_int_test\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1388424601000,\n        \"updated_at\": 1388424601000\n    },\n    {\n        \"id\": 93,\n        \"name\": \"Hopkins School\",\n        \"slug\": \"hopkins\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1390588926000,\n        \"updated_at\": 1390588926000\n    },\n    {\n        \"id\": 94,\n        \"name\": \"Wesleyan University\",\n        \"slug\": \"wesleyan\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1390589190000,\n        \"updated_at\": 1390589190000\n    },\n    {\n        \"id\": 95,\n        \"name\": \"Andover Deprecated\",\n        \"slug\": \"andoverdeprecated\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1390589242000,\n        \"updated_at\": 1390589242000\n    },\n    {\n        \"id\": 96,\n        \"name\": \"Test Org 1\",\n        \"slug\": \"testorg1\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1391091943000,\n        \"updated_at\": 1391091943000\n    },\n    {\n        \"id\": 97,\n        \"name\": \"EF Test One\",\n        \"slug\": \"eftestone\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1391092830000,\n        \"updated_at\": 1391092830000\n    },\n    {\n        \"id\": 102,\n        \"name\": \"Console Test \",\n        \"slug\": \"Any consoletestjessie\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1391454473000,\n        \"updated_at\": 1510067729000\n    },\n    {\n        \"id\": 103,\n        \"name\": \"Console Test Joanna \",\n        \"slug\": \"consoletestjoanna\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1391454504000,\n        \"updated_at\": 1391454504000\n    },\n    {\n        \"id\": 104,\n        \"name\": \"Console Test Courtney P\",\n        \"slug\": \"consoletestcourtneyp\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1391454546000,\n        \"updated_at\": 1391454546000\n    },\n    {\n        \"id\": 105,\n        \"name\": \"Console Test Meredith\",\n        \"slug\": \"consoletestmeredith\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1391454551000,\n        \"updated_at\": 1391454551000\n    },\n    {\n        \"id\": 106,\n        \"name\": \"Courtney Test\",\n        \"slug\": \"courtneytest\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1391454605000,\n        \"updated_at\": 1391454605000\n    },\n    {\n        \"id\": 107,\n        \"name\": \"Console Test Mat\",\n        \"slug\": \"consoletestmat\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1391454616000,\n        \"updated_at\": 1391454616000\n    },\n    {\n        \"id\": 108,\n        \"name\": \"Courtney Test Test\",\n        \"slug\": \"courtneytesttest\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1391454623000,\n        \"updated_at\": 1391454623000\n    },\n    {\n        \"id\": 109,\n        \"name\": \"Sully Testing Org\",\n        \"slug\": \"sullytest\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1391454940000,\n        \"updated_at\": 1391454940000\n    },\n    {\n        \"id\": 110,\n        \"name\": \"Console Test Jessie\",\n        \"slug\": \"console-test-jessie\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1391455708000,\n        \"updated_at\": 1391455708000\n    },\n    {\n        \"id\": 112,\n        \"name\": \"dfefwef\",\n        \"slug\": \"13546\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1391551993000,\n        \"updated_at\": 1391551993000\n    },\n    {\n        \"id\": 113,\n        \"name\": \"34t3\",\n        \"slug\": \"rge345\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1391552111000,\n        \"updated_at\": 1391552111000\n    },\n    {\n        \"id\": 114,\n        \"name\": \"value\",\n        \"slug\": \"whatup2\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1391552256000,\n        \"updated_at\": 1391552256000\n    },\n    {\n        \"id\": 115,\n        \"name\": \"GivingData Test\",\n        \"slug\": \"givingdata2-evertrue-dev\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1392399584000,\n        \"updated_at\": 1392399584000\n    },\n    {\n        \"id\": 116,\n        \"name\": \"GivingData Test\",\n        \"slug\": \"givingdata-evertrue-dev\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1392399602000,\n        \"updated_at\": 1392399602000\n    },\n    {\n        \"id\": 117,\n        \"name\": \"givingdata3-evertrue-dev\",\n        \"slug\": \"givingdata3-evertrue-dev\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1392402878000,\n        \"updated_at\": 1392402878000\n    },\n    {\n        \"id\": 118,\n        \"name\": \"GivingTree Data Test\",\n        \"slug\": \"givingtreedatatest\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1392405902000,\n        \"updated_at\": 1392405902000\n    },\n    {\n        \"id\": 119,\n        \"name\": \"GivingTree Data Test 2\",\n        \"slug\": \"givingtreedatatesttwo\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1392415585000,\n        \"updated_at\": 1392415585000\n    },\n    {\n        \"id\": 120,\n        \"name\": \"gttestthree\",\n        \"slug\": \"gttestthree\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1392649463000,\n        \"updated_at\": 1392649463000\n    },\n    {\n        \"id\": 121,\n        \"name\": \"gttestfour\",\n        \"slug\": \"gttestfour\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1392655501000,\n        \"updated_at\": 1392655501000\n    },\n    {\n        \"id\": 122,\n        \"name\": \"gttestfive\",\n        \"slug\": \"gttestfive\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1392656454000,\n        \"updated_at\": 1392656454000\n    },\n    {\n        \"id\": 123,\n        \"name\": \"gttestfive\",\n        \"slug\": \"gttestsix\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1392656971000,\n        \"updated_at\": 1392656971000\n    },\n    {\n        \"id\": 124,\n        \"name\": \"gttestseven\",\n        \"slug\": \"gttestseven\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1392659783000,\n        \"updated_at\": 1392659783000\n    },\n    {\n        \"id\": 125,\n        \"name\": \"Brown University Deprecated\",\n        \"slug\": \"brown-deprecated\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1393254549000,\n        \"updated_at\": 1393254549000\n    },\n    {\n        \"id\": 126,\n        \"name\": \"julie-evertrue-dev\",\n        \"slug\": \"julie-devtest\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1393442069000,\n        \"updated_at\": 1393442069000\n    },\n    {\n        \"id\": 127,\n        \"name\": \"haitestone\",\n        \"slug\": \"haitestone\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1393527734000,\n        \"updated_at\": 1393527734000\n    },\n    {\n        \"id\": 128,\n        \"name\": \"Head-Royce School\",\n        \"slug\": \"headroyce\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1393881064000,\n        \"updated_at\": 1393881064000\n    },\n    {\n        \"id\": 129,\n        \"name\": \"haitesttwo\",\n        \"slug\": \"haitesttwo\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1394131121000,\n        \"updated_at\": 1394131121000\n    },\n    {\n        \"id\": 130,\n        \"name\": \"Sully Testing Org 2\",\n        \"slug\": \"sullytestsecondary\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1395085432000,\n        \"updated_at\": 1395085432000\n    },\n    {\n        \"id\": 131,\n        \"name\": \"ayushdev\",\n        \"slug\": \"ayushdev\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1395770654000,\n        \"updated_at\": 1395770654000\n    },\n    {\n        \"id\": 132,\n        \"name\": \"Andover\",\n        \"slug\": \"andover\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1396032056000,\n        \"updated_at\": 1396032056000\n    },\n    {\n        \"id\": 133,\n        \"name\": \"Console Test Julie\",\n        \"slug\": \"testjulie\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1396556368000,\n        \"updated_at\": 1396556368000\n    },\n    {\n        \"id\": 134,\n        \"name\": \"Console Julie Test\",\n        \"slug\": \"julietestconsole\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1396556863000,\n        \"updated_at\": 1396556863000\n    },\n    {\n        \"id\": 135,\n        \"name\": \"fdsa\",\n        \"slug\": \"fdsa\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1396983959000,\n        \"updated_at\": 1396983959000\n    },\n    {\n        \"id\": 136,\n        \"name\": \"Console Test Julie\",\n        \"slug\": \"julieconsoletest\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1396984266000,\n        \"updated_at\": 1396984266000\n    },\n    {\n        \"id\": 137,\n        \"name\": \"Console Test Julie\",\n        \"slug\": \"julieconsoletestagain\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1396984462000,\n        \"updated_at\": 1396984462000\n    },\n    {\n        \"id\": 138,\n        \"name\": \"Julie Test Product\",\n        \"slug\": \"julieproducttest\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1396984538000,\n        \"updated_at\": 1396984538000\n    },\n    {\n        \"id\": 139,\n        \"name\": \"Julie Legacy Product Test\",\n        \"slug\": \"julieproducttestold\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1396984656000,\n        \"updated_at\": 1396984656000\n    },\n    {\n        \"id\": 140,\n        \"name\": \"Console Test Julie 3\",\n        \"slug\": \"juliethreeconsoletest\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1397066244000,\n        \"updated_at\": 1397066244000\n    },\n    {\n        \"id\": 141,\n        \"name\": \"Console Test Julie 4\",\n        \"slug\": \"julietestconsolefour\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1397741217000,\n        \"updated_at\": 1397741217000\n    },\n    {\n        \"id\": 142,\n        \"name\": \"Console Julie Test 5\",\n        \"slug\": \"julieconsoletestfive\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1397741492000,\n        \"updated_at\": 1397741492000\n    },\n    {\n        \"id\": 143,\n        \"name\": \"Console Julie Test 5\",\n        \"slug\": \"julietestconsolefive\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1397741678000,\n        \"updated_at\": 1397741678000\n    },\n    {\n        \"id\": 144,\n        \"name\": \"Console Julie Test 5\",\n        \"slug\": \"julietestconsoelfive\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1397743723000,\n        \"updated_at\": 1397743723000\n    },\n    {\n        \"id\": 145,\n        \"name\": \"Console Test 6\",\n        \"slug\": \"julietestconsolesix\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1397747666000,\n        \"updated_at\": 1397747666000\n    },\n    {\n        \"id\": 146,\n        \"name\": \"Cat School\",\n        \"slug\": \"catschool\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1398971644000,\n        \"updated_at\": 1398971644000\n    },\n    {\n        \"id\": 147,\n        \"name\": \"Dog School 1\",\n        \"slug\": \"dogschool\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1398972105000,\n        \"updated_at\": 1398972105000\n    },\n    {\n        \"id\": 148,\n        \"name\": \"Elephant School\",\n        \"slug\": \"elephantschool\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1398973368000,\n        \"updated_at\": 1398973368000\n    },\n    {\n        \"id\": 149,\n        \"name\": \"Anna Test School\",\n        \"slug\": \"annatest\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1398988596000,\n        \"updated_at\": 1398988596000\n    },\n    {\n        \"id\": 150,\n        \"name\": \"Monkey School\",\n        \"slug\": \"monkeyschool\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1399044357000,\n        \"updated_at\": 1399044357000\n    },\n    {\n        \"id\": 151,\n        \"name\": \"Bird School\",\n        \"slug\": \"birdschool\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1399048065000,\n        \"updated_at\": 1399048065000\n    },\n    {\n        \"id\": 152,\n        \"name\": \"Hippo School\",\n        \"slug\": \"hipposchool\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1399048605000,\n        \"updated_at\": 1399048605000\n    },\n    {\n        \"id\": 153,\n        \"name\": \"Horse School\",\n        \"slug\": \"horseschool\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1399052960000,\n        \"updated_at\": 1399052960000\n    },\n    {\n        \"id\": 154,\n        \"name\": \"AnnaTestOne\",\n        \"slug\": \"annatestone\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1399054018000,\n        \"updated_at\": 1399054018000\n    },\n    {\n        \"id\": 155,\n        \"name\": \"AnnaTestTwo\",\n        \"slug\": \"annatesttwo\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1399054672000,\n        \"updated_at\": 1399054672000\n    },\n    {\n        \"id\": 156,\n        \"name\": \"AnnaTestThree\",\n        \"slug\": \"annatestthree\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1399054957000,\n        \"updated_at\": 1399054957000\n    },\n    {\n        \"id\": 157,\n        \"name\": \"Brown University\",\n        \"slug\": \"brown\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400163937000,\n        \"updated_at\": 1400163937000\n    },\n    {\n        \"id\": 158,\n        \"name\": \"EverTrue GivingTree Demo\",\n        \"slug\": \"givingtreedemo\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400267370000,\n        \"updated_at\": 1737377932000\n    },\n    {\n        \"id\": 159,\n        \"name\": \"Bob Test\",\n        \"slug\": \"bobtest\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400524348000,\n        \"updated_at\": 1400524348000\n    },\n    {\n        \"id\": 160,\n        \"name\": \"SODAS Scout Test\",\n        \"slug\": \"sodas_test_1400526658\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400526654000,\n        \"updated_at\": 1400526654000\n    },\n    {\n        \"id\": 161,\n        \"name\": \"SODAS Scout Test\",\n        \"slug\": \"sodas_test_1400527005\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400527008000,\n        \"updated_at\": 1400527008000\n    },\n    {\n        \"id\": 162,\n        \"name\": \"SODAS Scout Test\",\n        \"slug\": \"sodas_test_1400527042\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400527039000,\n        \"updated_at\": 1400527039000\n    },\n    {\n        \"id\": 163,\n        \"name\": \"SODAS Scout Test\",\n        \"slug\": \"sodas_test_1400527050\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400527047000,\n        \"updated_at\": 1400527047000\n    },\n    {\n        \"id\": 164,\n        \"name\": \"SODAS Scout Test (164)\",\n        \"slug\": \"sodas_test_1400527093\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400527089000,\n        \"updated_at\": 1400527089000\n    },\n    {\n        \"id\": 165,\n        \"name\": \"SODAS Scout Test\",\n        \"slug\": \"sodas_test_1400527094\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400527089000,\n        \"updated_at\": 1400527089000\n    },\n    {\n        \"id\": 166,\n        \"name\": \"SODAS Scout Test\",\n        \"slug\": \"sodas_test_1400527133\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400527128000,\n        \"updated_at\": 1400527128000\n    },\n    {\n        \"id\": 167,\n        \"name\": \"SODAS Scout Test\",\n        \"slug\": \"sodas_test_1400527253000\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400527248000,\n        \"updated_at\": 1400527248000\n    },\n    {\n        \"id\": 168,\n        \"name\": \"SODAS Scout Test\",\n        \"slug\": \"sodas_test_1400527549875\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400527545000,\n        \"updated_at\": 1400527545000\n    },\n    {\n        \"id\": 169,\n        \"name\": \"SODAS Scout Test\",\n        \"slug\": \"sodas_test_1400527550062\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400527545000,\n        \"updated_at\": 1400527545000\n    },\n    {\n        \"id\": 170,\n        \"name\": \"SODAS Scout Test\",\n        \"slug\": \"sodas_test_1400527662334\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400527658000,\n        \"updated_at\": 1400527658000\n    },\n    {\n        \"id\": 171,\n        \"name\": \"SODAS Scout Test\",\n        \"slug\": \"sodas_test_1400527662991\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400527658000,\n        \"updated_at\": 1400527658000\n    },\n    {\n        \"id\": 172,\n        \"name\": \"SODAS Scout Test\",\n        \"slug\": \"sodas_test_1400527772105\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400527767000,\n        \"updated_at\": 1400527767000\n    },\n    {\n        \"id\": 173,\n        \"name\": \"SODAS Scout Test\",\n        \"slug\": \"sodas_test_1400527790722\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400527786000,\n        \"updated_at\": 1400527786000\n    },\n    {\n        \"id\": 174,\n        \"name\": \"SODAS Scout Test\",\n        \"slug\": \"sodas_test_1400527962554\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400527958000,\n        \"updated_at\": 1400527958000\n    },\n    {\n        \"id\": 175,\n        \"name\": \"SODAS Scout Test\",\n        \"slug\": \"sodas_test_1400527962777\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400527958000,\n        \"updated_at\": 1400527958000\n    },\n    {\n        \"id\": 176,\n        \"name\": \"SODAS Scout Test\",\n        \"slug\": \"sodas_test_1400528756277\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400528751000,\n        \"updated_at\": 1400528751000\n    },\n    {\n        \"id\": 177,\n        \"name\": \"SODAS Scout Test\",\n        \"slug\": \"sodas_test_1400528756481\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400528752000,\n        \"updated_at\": 1400528752000\n    },\n    {\n        \"id\": 178,\n        \"name\": \"SODAS Scout Test\",\n        \"slug\": \"sodas_test_1400528775703\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400528771000,\n        \"updated_at\": 1400528771000\n    },\n    {\n        \"id\": 179,\n        \"name\": \"SODAS Scout Test\",\n        \"slug\": \"sodas_test_1400528775878\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400528771000,\n        \"updated_at\": 1400528771000\n    },\n    {\n        \"id\": 180,\n        \"name\": \"SODAS Scout Test\",\n        \"slug\": \"sodas_test_1400529028318\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400529023000,\n        \"updated_at\": 1400529023000\n    },\n    {\n        \"id\": 181,\n        \"name\": \"SODAS Scout Test\",\n        \"slug\": \"sodas_test_1400529028500\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400529024000,\n        \"updated_at\": 1400529024000\n    },\n    {\n        \"id\": 182,\n        \"name\": \"SODAS Scout Test\",\n        \"slug\": \"sodas_test_1400533924801\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400533924000,\n        \"updated_at\": 1400533924000\n    },\n    {\n        \"id\": 183,\n        \"name\": \"SODAS Scout Test\",\n        \"slug\": \"sodas_test_1400533925020\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400533925000,\n        \"updated_at\": 1400533925000\n    },\n    {\n        \"id\": 184,\n        \"name\": \"SODAS Scout Test\",\n        \"slug\": \"sodas_test_1400534512634\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400534513000,\n        \"updated_at\": 1400534513000\n    },\n    {\n        \"id\": 185,\n        \"name\": \"SODAS Scout Test\",\n        \"slug\": \"sodas_test_1400534529978\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400534530000,\n        \"updated_at\": 1400534530000\n    },\n    {\n        \"id\": 186,\n        \"name\": \"SODAS Scout Test\",\n        \"slug\": \"sodas_test_1400534530295\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400534530000,\n        \"updated_at\": 1400534530000\n    },\n    {\n        \"id\": 187,\n        \"name\": \"SODAS Scout Test\",\n        \"slug\": \"sodas_test_1400534608322\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400534608000,\n        \"updated_at\": 1400534608000\n    },\n    {\n        \"id\": 188,\n        \"name\": \"SODAS Scout Test\",\n        \"slug\": \"sodas_test_1400534636285\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400534636000,\n        \"updated_at\": 1400534636000\n    },\n    {\n        \"id\": 189,\n        \"name\": \"SODAS Scout Test\",\n        \"slug\": \"sodas_test_1400534700371\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400534700000,\n        \"updated_at\": 1400534700000\n    },\n    {\n        \"id\": 190,\n        \"name\": \"AnnaOrgTest123\",\n        \"slug\": \"annaorgtest\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400606675000,\n        \"updated_at\": 1400606675000\n    },\n    {\n        \"id\": 191,\n        \"name\": \"AnnaTest9\",\n        \"slug\": \"annatestnine\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400608100000,\n        \"updated_at\": 1400608100000\n    },\n    {\n        \"id\": 192,\n        \"name\": \"AnnaTest5\",\n        \"slug\": \"annatestfive\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400611730000,\n        \"updated_at\": 1400611730000\n    },\n    {\n        \"id\": 193,\n        \"name\": \"AnnaTest12\",\n        \"slug\": \"annatesttwelve\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400614470000,\n        \"updated_at\": 1400614470000\n    },\n    {\n        \"id\": 194,\n        \"name\": \"AnnaTest6\",\n        \"slug\": \"annatestsix\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400615507000,\n        \"updated_at\": 1400615507000\n    },\n    {\n        \"id\": 195,\n        \"name\": \"AnnaTest7\",\n        \"slug\": \"annatestseven\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400615803000,\n        \"updated_at\": 1400615803000\n    },\n    {\n        \"id\": 196,\n        \"name\": \"AnnaTest8\",\n        \"slug\": \"annatesteight\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400617076000,\n        \"updated_at\": 1400617076000\n    },\n    {\n        \"id\": 197,\n        \"name\": \"AnnaTest10\",\n        \"slug\": \"annatestten\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400618077000,\n        \"updated_at\": 1400618077000\n    },\n    {\n        \"id\": 198,\n        \"name\": \"XYZSchool\",\n        \"slug\": \"xyzschool\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400634471000,\n        \"updated_at\": 1400634471000\n    },\n    {\n        \"id\": 199,\n        \"name\": \"ZSchool1\",\n        \"slug\": \"zschoolone\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400634641000,\n        \"updated_at\": 1400634641000\n    },\n    {\n        \"id\": 200,\n        \"name\": \"ZSchool2\",\n        \"slug\": \"zschooltwo\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400635283000,\n        \"updated_at\": 1400635283000\n    },\n    {\n        \"id\": 201,\n        \"name\": \"ZSchool3\",\n        \"slug\": \"zschoolthree\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400636548000,\n        \"updated_at\": 1400636548000\n    },\n    {\n        \"id\": 202,\n        \"name\": \"YZSchool\",\n        \"slug\": \"yzschool\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400692480000,\n        \"updated_at\": 1400692480000\n    },\n    {\n        \"id\": 203,\n        \"name\": \"YYZSchool\",\n        \"slug\": \"yyzschool\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400692808000,\n        \"updated_at\": 1400692808000\n    },\n    {\n        \"id\": 204,\n        \"name\": \"ZZZSchool\",\n        \"slug\": \"zzzschool\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1400701805000,\n        \"updated_at\": 1400701805000\n    },\n    {\n        \"id\": 205,\n        \"name\": \"Importer Scout Test One\",\n        \"slug\": \"importer-scout-test-one\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1401215536000,\n        \"updated_at\": 1401215536000\n    },\n    {\n        \"id\": 206,\n        \"name\": \"Importer Scout Test Two\",\n        \"slug\": \"importer-scout-test-two\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1401215557000,\n        \"updated_at\": 1401215557000\n    },\n    {\n        \"id\": 207,\n        \"name\": \"DJ TEST ONE\",\n        \"slug\": \"djtestone\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1401723333000,\n        \"updated_at\": 1401723333000\n    },\n    {\n        \"id\": 208,\n        \"name\": \"Bear School\",\n        \"slug\": \"bearschool\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1401727918000,\n        \"updated_at\": 1401727918000\n    },\n    {\n        \"id\": 210,\n        \"name\": \"Zebra School\",\n        \"slug\": \"zebraschool\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1401805811000,\n        \"updated_at\": 1401805811000\n    },\n    {\n        \"id\": 211,\n        \"name\": \"Food School\",\n        \"slug\": \"foodschool\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1401815669000,\n        \"updated_at\": 1401815669000\n    },\n    {\n        \"id\": 212,\n        \"name\": \"Andy Test\",\n        \"slug\": \"andytest\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1401901569000,\n        \"updated_at\": 1401901569000\n    },\n    {\n        \"id\": 213,\n        \"name\": \"Console Julie Test 7\",\n        \"slug\": \"julietestseven\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1404236529000,\n        \"updated_at\": 1404236529000\n    },\n    {\n        \"id\": 214,\n        \"name\": \"Console Test 7 Again\",\n        \"slug\": \"julietestconsoleseventwo\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1404238422000,\n        \"updated_at\": 1404238422000\n    },\n    {\n        \"id\": 215,\n        \"name\": \"Console Test Julie 8\",\n        \"slug\": \"julietestsconsoleeight\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1404239127000,\n        \"updated_at\": 1404239127000\n    },\n    {\n        \"id\": 216,\n        \"name\": \"Console Julie Test 9\",\n        \"slug\": \"julietestconsolenine\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1404239212000,\n        \"updated_at\": 1404239212000\n    },\n    {\n        \"id\": 217,\n        \"name\": \"Console Julie Test 10\",\n        \"slug\": \"julieconsoletestten\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1404312208000,\n        \"updated_at\": 1404312208000\n    },\n    {\n        \"id\": 218,\n        \"name\": \"Console Julie Test 11\",\n        \"slug\": \"julietestconsoleeleven\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1404313668000,\n        \"updated_at\": 1404313668000\n    },\n    {\n        \"id\": 219,\n        \"name\": \"Console Test Julie 12\",\n        \"slug\": \"julietestconsoletwelve\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1404313726000,\n        \"updated_at\": 1404313726000\n    },\n    {\n        \"id\": 220,\n        \"name\": \"Console Julie Test 13\",\n        \"slug\": \"julietestconsolethirteen\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1404313761000,\n        \"updated_at\": 1404313761000\n    },\n    {\n        \"id\": 221,\n        \"name\": \"Console Test Julie 14\",\n        \"slug\": \"julietestconsolefourteen\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1404314248000,\n        \"updated_at\": 1404314248000\n    },\n    {\n        \"id\": 222,\n        \"name\": \"Console Julie Test 15\",\n        \"slug\": \"julietestconsolefifteen\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1404314505000,\n        \"updated_at\": 1404314505000\n    },\n    {\n        \"id\": 223,\n        \"name\": \"Console Julie Test 16\",\n        \"slug\": \"julietestconsolesixteen\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1404314948000,\n        \"updated_at\": 1404314948000\n    },\n    {\n        \"id\": 224,\n        \"name\": \"Kitty School\",\n        \"slug\": \"kittyschool\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1404746113000,\n        \"updated_at\": 1404746113000\n    },\n    {\n        \"id\": 225,\n        \"name\": \"Babson\",\n        \"slug\": \"babson\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": null,\n        \"updated_at\": null\n    },\n    {\n        \"id\": 227,\n        \"name\": \"Pony School\",\n        \"slug\": \"ponyschool\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1406147778000,\n        \"updated_at\": 1406147778000\n    },\n    {\n        \"id\": 228,\n        \"name\": \"Koala School\",\n        \"slug\": \"koalaschool\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1406147937000,\n        \"updated_at\": 1406147937000\n    },\n    {\n        \"id\": 229,\n        \"name\": \"XYZZSchool\",\n        \"slug\": \"xyzzschool\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1406148346000,\n        \"updated_at\": 1406148346000\n    },\n    {\n        \"id\": 230,\n        \"name\": \"Lizard School\",\n        \"slug\": \"lizardschool\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1406150724000,\n        \"updated_at\": 1406150724000\n    },\n    {\n        \"id\": 231,\n        \"name\": \"AnnaTestZ\",\n        \"slug\": \"annatestz\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1406151087000,\n        \"updated_at\": 1406151087000\n    },\n    {\n        \"id\": 232,\n        \"name\": \"ZSchool4\",\n        \"slug\": \"zschoolfour\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1406151245000,\n        \"updated_at\": 1406151245000\n    },\n    {\n        \"id\": 233,\n        \"name\": \"ZSchoolFive\",\n        \"slug\": \"zschoolfive\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1406151343000,\n        \"updated_at\": 1406151343000\n    },\n    {\n        \"id\": 234,\n        \"name\": \"ZSchool10\",\n        \"slug\": \"zschoolten\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1406151631000,\n        \"updated_at\": 1406151631000\n    },\n    {\n        \"id\": 235,\n        \"name\": \"ZSchool8\",\n        \"slug\": \"zschooleight\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1406151724000,\n        \"updated_at\": 1406151724000\n    },\n    {\n        \"id\": 236,\n        \"name\": \"Lion School\",\n        \"slug\": \"lionschool\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1406152442000,\n        \"updated_at\": 1406152442000\n    },\n    {\n        \"id\": 237,\n        \"name\": \"ZSchool7\",\n        \"slug\": \"zschoolseven\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1406152585000,\n        \"updated_at\": 1406152585000\n    },\n    {\n        \"id\": 238,\n        \"name\": \"LionSchool2\",\n        \"slug\": \"lionschooltwo\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1406152847000,\n        \"updated_at\": 1406152847000\n    },\n    {\n        \"id\": 239,\n        \"name\": \"Lion School3\",\n        \"slug\": \"lionschoolthree\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1406153017000,\n        \"updated_at\": 1406153017000\n    },\n    {\n        \"id\": 240,\n        \"name\": \"Lion School4\",\n        \"slug\": \"lionschoolfour\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1406153303000,\n        \"updated_at\": 1406153303000\n    },\n    {\n        \"id\": 241,\n        \"name\": \"ZSchool6\",\n        \"slug\": \"zschoolsix\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1406206492000,\n        \"updated_at\": 1406206492000\n    },\n    {\n        \"id\": 242,\n        \"name\": \"ZSchool9\",\n        \"slug\": \"zschoolnine\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1406207232000,\n        \"updated_at\": 1406207232000\n    },\n    {\n        \"id\": 243,\n        \"name\": \"LionSchool5\",\n        \"slug\": \"lionschoolfive\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1406207629000,\n        \"updated_at\": 1406207629000\n    },\n    {\n        \"id\": 244,\n        \"name\": \"Hai REDS Test\",\n        \"slug\": \"hairedstest\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1406311404000,\n        \"updated_at\": 1406311404000\n    },\n    {\n        \"id\": 245,\n        \"name\": \"ZSchool12\",\n        \"slug\": \"zschooltwelve\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1406554773000,\n        \"updated_at\": 1406554773000\n    },\n    {\n        \"id\": 246,\n        \"name\": \"ZSchool13\",\n        \"slug\": \"zschoolthirteen\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1406576388000,\n        \"updated_at\": 1406576388000\n    },\n    {\n        \"id\": 247,\n        \"name\": \"zschool14\",\n        \"slug\": \"zschoolfourteen\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1406576874000,\n        \"updated_at\": 1406576874000\n    },\n    {\n        \"id\": 248,\n        \"name\": \"Alex Tester\",\n        \"slug\": \"alextest\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1407856004000,\n        \"updated_at\": 1580159270000\n    },\n    {\n        \"id\": 249,\n        \"name\": \"ZDogSchool\",\n        \"slug\": \"zdogschool\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1408378946000,\n        \"updated_at\": 1408378946000\n    },\n    {\n        \"id\": 250,\n        \"name\": \"ZZAnnaSchool\",\n        \"slug\": \"zzannaschool\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1408380582000,\n        \"updated_at\": 1408380582000\n    },\n    {\n        \"id\": 251,\n        \"name\": \"ZASchool\",\n        \"slug\": \"zaschool\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1408380852000,\n        \"updated_at\": 1408380852000\n    },\n    {\n        \"id\": 252,\n        \"name\": \"ZYAnnaSchool\",\n        \"slug\": \"zyannaschool\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1408381259000,\n        \"updated_at\": 1408381259000\n    },\n    {\n        \"id\": 253,\n        \"name\": \"ZAnnaTest\",\n        \"slug\": \"zannatest\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1408381346000,\n        \"updated_at\": 1408381346000\n    },\n    {\n        \"id\": 254,\n        \"name\": \"ZebraSchoolTwo\",\n        \"slug\": \"zebraschooltwo\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1408391164000,\n        \"updated_at\": 1408391164000\n    },\n    {\n        \"id\": 255,\n        \"name\": \"UGC Scout Test One\",\n        \"slug\": \"ugc-scout-test-one\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1409859579000,\n        \"updated_at\": 1409859579000\n    },\n    {\n        \"id\": 256,\n        \"name\": \"UGC Scout Test Two\",\n        \"slug\": \"ugc-scout-test-two\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1409929481000,\n        \"updated_at\": 1409929481000\n    },\n    {\n        \"id\": 257,\n        \"name\": \"Kent Place\",\n        \"slug\": \"kentplace\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1411501251000,\n        \"updated_at\": 1411501251000\n    },\n    {\n        \"id\": 258,\n        \"name\": \"Raccoon School\",\n        \"slug\": \"raccoonschool\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1411999840000,\n        \"updated_at\": 1411999840000\n    },\n    {\n        \"id\": 259,\n        \"name\": \"SantaSchool\",\n        \"slug\": \"santaschool\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1418055479000,\n        \"updated_at\": 1418055479000\n    },\n    {\n        \"id\": 260,\n        \"name\": \"PJs Personal GT\",\n        \"slug\": \"pjspersonalgt\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1418738250000,\n        \"updated_at\": 1418738250000\n    },\n    {\n        \"id\": 261,\n        \"name\": \"TEST DELETE ORG\",\n        \"slug\": \"testdeleteorg\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1420734164000,\n        \"updated_at\": 1420734164000\n    },\n    {\n        \"id\": 262,\n        \"name\": \"Community evertrue-dev\",\n        \"slug\": \"communityautotest\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1423602595000,\n        \"updated_at\": 1423602595000\n    },\n    {\n        \"id\": 263,\n        \"name\": \"Anna Tiger School\",\n        \"slug\": \"annatigerschool\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1425062317000,\n        \"updated_at\": 1425062317000\n    },\n    {\n        \"id\": 264,\n        \"name\": \"Anna Mouse School\",\n        \"slug\": \"annamouseschool\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1425063210000,\n        \"updated_at\": 1528933417000\n    },\n    {\n        \"id\": 265,\n        \"name\": \"Anna Happy School\",\n        \"slug\": \"annahappyschool\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1425065876000,\n        \"updated_at\": 1425065876000\n    },\n    {\n        \"id\": 266,\n        \"name\": \"Test Settings\",\n        \"slug\": \"testsettings\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1425328217000,\n        \"updated_at\": 1425328217000\n    },\n    {\n        \"id\": 267,\n        \"name\": \"Test Settings One\",\n        \"slug\": \"testsettingsone\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1425397357000,\n        \"updated_at\": 1425397357000\n    },\n    {\n        \"id\": 269,\n        \"name\": \"Test Settings 3\",\n        \"slug\": \"testsettingsthree\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1425397721000,\n        \"updated_at\": 1425397721000\n    },\n    {\n        \"id\": 270,\n        \"name\": \"Test Settings 4\",\n        \"slug\": \"testsettingsfour\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1425398408000,\n        \"updated_at\": 1425398408000\n    },\n    {\n        \"id\": 271,\n        \"name\": \"Test Settings Five\",\n        \"slug\": \"testsettingsfive\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1425398480000,\n        \"updated_at\": 1425398480000\n    },\n    {\n        \"id\": 272,\n        \"name\": \"Test Settings Six\",\n        \"slug\": \"testsettingssix\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1425399091000,\n        \"updated_at\": 1425399091000\n    },\n    {\n        \"id\": 273,\n        \"name\": \"Test Settings Seven\",\n        \"slug\": \"testsettingsseven\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1425400328000,\n        \"updated_at\": 1425400328000\n    },\n    {\n        \"id\": 274,\n        \"name\": \"Test Settings 8\",\n        \"slug\": \"testsettingseight\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1425481265000,\n        \"updated_at\": 1425481265000\n    },\n    {\n        \"id\": 275,\n        \"name\": \"Test Map Org 1\",\n        \"slug\": \"testmaporgone\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1426007690000,\n        \"updated_at\": 1426007690000\n    },\n    {\n        \"id\": 276,\n        \"name\": \"Importer Ugc Import Test\",\n        \"slug\": \"importerugcimporttest\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1428074812000,\n        \"updated_at\": 1428074812000\n    },\n    {\n        \"id\": 277,\n        \"name\": \"Importer Ugc Import Test 2\",\n        \"slug\": \"importerugcimporttesttwo\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1428952504000,\n        \"updated_at\": 1428952504000\n    },\n    {\n        \"id\": 278,\n        \"name\": \"Importer Ugc Import Test 3\",\n        \"slug\": \"importerugcimporttestthree\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1428958323000,\n        \"updated_at\": 1428958323000\n    },\n    {\n        \"id\": 279,\n        \"name\": \"FEC\",\n        \"slug\": \"fec\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1429712623000,\n        \"updated_at\": 1429712623000\n    },\n    {\n        \"id\": 280,\n        \"name\": \"givingdata4-evertrue-dev\",\n        \"slug\": \"givingdata4-evertrue-dev\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1430764587000,\n        \"updated_at\": 1430764587000\n    },\n    {\n        \"id\": 281,\n        \"name\": \"givingtreedemo-hai\",\n        \"slug\": \"givingtreedemo-hai\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1431628143000,\n        \"updated_at\": 1431628143000\n    },\n    {\n        \"id\": 282,\n        \"name\": \"St. Paul's School\",\n        \"slug\": \"sps\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1433181845000,\n        \"updated_at\": 1433181845000\n    },\n    {\n        \"id\": 284,\n        \"name\": \"Gorilla School\",\n        \"slug\": \"gorillas\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1437593131000,\n        \"updated_at\": 1437593131000\n    },\n    {\n        \"id\": 285,\n        \"name\": \"Gorilla School2\",\n        \"slug\": \"gorillastwo\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1437593323000,\n        \"updated_at\": 1437593323000\n    },\n    {\n        \"id\": 286,\n        \"name\": \"Gorillaz\",\n        \"slug\": \"gorillaz\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1437594381000,\n        \"updated_at\": 1437594381000\n    },\n    {\n        \"id\": 287,\n        \"name\": \"Jungle School\",\n        \"slug\": \"jungles\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1438203713000,\n        \"updated_at\": 1438203713000\n    },\n    {\n        \"id\": 288,\n        \"name\": \"Panther School\",\n        \"slug\": \"panthers\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1438203989000,\n        \"updated_at\": 1438203989000\n    },\n    {\n        \"id\": 289,\n        \"name\": \"Snake School\",\n        \"slug\": \"snakes\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1438204557000,\n        \"updated_at\": 1438204557000\n    },\n    {\n        \"id\": 290,\n        \"name\": \"SnakesTwo\",\n        \"slug\": \"snakestwo\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1438204658000,\n        \"updated_at\": 1438204658000\n    },\n    {\n        \"id\": 291,\n        \"name\": \"SnakesThree\",\n        \"slug\": \"snakesthree\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1438204855000,\n        \"updated_at\": 1438204855000\n    },\n    {\n        \"id\": 292,\n        \"name\": \"SnakesFour\",\n        \"slug\": \"snakesfour\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1438205065000,\n        \"updated_at\": 1438205065000\n    },\n    {\n        \"id\": 293,\n        \"name\": \"SnakeSchoolFour\",\n        \"slug\": \"snakeschoolfour\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1438279578000,\n        \"updated_at\": 1438279578000\n    },\n    {\n        \"id\": 294,\n        \"name\": \"Snake School Five\",\n        \"slug\": \"snakeschoolfive\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1438280149000,\n        \"updated_at\": 1438280149000\n    },\n    {\n        \"id\": 295,\n        \"name\": \"Testing Legacy-free Org Creation\",\n        \"slug\": \"borgorg\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1438284169000,\n        \"updated_at\": 1438284169000\n    },\n    {\n        \"id\": 296,\n        \"name\": \"odd\",\n        \"slug\": \"abs\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1438787772000,\n        \"updated_at\": 1438787772000\n    },\n    {\n        \"id\": 297,\n        \"name\": \"Test2\",\n        \"slug\": \"dsds\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1438787826000,\n        \"updated_at\": 1438787826000\n    },\n    {\n        \"id\": 298,\n        \"name\": \"TestMouse\",\n        \"slug\": \"racekar\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1438787927000,\n        \"updated_at\": 1438787927000\n    },\n    {\n        \"id\": 299,\n        \"name\": \"Mouse 34\",\n        \"slug\": \"mouse\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1438788028000,\n        \"updated_at\": 1438788028000\n    },\n    {\n        \"id\": 300,\n        \"name\": \"Dog School\",\n        \"slug\": \"dogs\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1438788223000,\n        \"updated_at\": 1438788223000\n    },\n    {\n        \"id\": 301,\n        \"name\": \"Ayush-Test1\",\n        \"slug\": \"test\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 5000,\n        \"created_at\": 1441209815000,\n        \"updated_at\": 1441209815000\n    },\n    {\n        \"id\": 302,\n        \"name\": \"Williams\",\n        \"slug\": \"williams-evertrue-dev\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1441743953000,\n        \"updated_at\": 1441743953000\n    },\n    {\n        \"id\": 303,\n        \"name\": \"Purdue\",\n        \"slug\": \"purdue\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1449157778000,\n        \"updated_at\": 1449157778000\n    },\n    {\n        \"id\": 304,\n        \"name\": \"REDS Test Org\",\n        \"slug\": \"redstest\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1449604084000,\n        \"updated_at\": 1449604084000\n    },\n    {\n        \"id\": 305,\n        \"name\": \"Julie Test Org\",\n        \"slug\": \"julietestorg\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1000,\n        \"created_at\": 1452277503000,\n        \"updated_at\": 1452277503000\n    },\n    {\n        \"id\": 306,\n        \"name\": \"GivingTree Demo March 2016\",\n        \"slug\": \"gtdemosly\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 40000,\n        \"created_at\": 1459185850000,\n        \"updated_at\": 1459185850000\n    },\n    {\n        \"id\": 307,\n        \"name\": \"Wombat School\",\n        \"slug\": \"wombatschool\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 122,\n        \"created_at\": 1459461191000,\n        \"updated_at\": 1543343149000\n    },\n    {\n        \"id\": 308,\n        \"name\": \"SF Updater Test\",\n        \"slug\": \"sfupdatertest\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 100,\n        \"created_at\": 1469127292000,\n        \"updated_at\": 1469127292000\n    },\n    {\n        \"id\": 309,\n        \"name\": \"Echidna School\",\n        \"slug\": \"echidna\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1000,\n        \"created_at\": 1475177621000,\n        \"updated_at\": 1475177621000\n    },\n    {\n        \"id\": 310,\n        \"name\": \"Console Julie Test Timezone\",\n        \"slug\": \"julietesttimezone\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 2000,\n        \"created_at\": 1482170581000,\n        \"updated_at\": 1482170581000\n    },\n    {\n        \"id\": 311,\n        \"name\": \"Console Julie Test Timezone2\",\n        \"slug\": \"julietesttimezonetwo\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1234,\n        \"created_at\": 1482171102000,\n        \"updated_at\": 1482171102000\n    },\n    {\n        \"id\": 312,\n        \"name\": \"Console Julie Test Timezone3\",\n        \"slug\": \"julietesttimezonethree\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1234,\n        \"created_at\": 1482171257000,\n        \"updated_at\": 1482171257000\n    },\n    {\n        \"id\": 313,\n        \"name\": \"Dev School\",\n        \"slug\": \"devschool\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 20000,\n        \"created_at\": 1482334357000,\n        \"updated_at\": 1482334357000\n    },\n    {\n        \"id\": 314,\n        \"name\": \"Console Julie Test Timezone4\",\n        \"slug\": \"julietesttimezonefour\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1222,\n        \"created_at\": 1482429665000,\n        \"updated_at\": 1482429665000\n    },\n    {\n        \"id\": 315,\n        \"name\": \"Console Julie Test Timezone5\",\n        \"slug\": \"julietesttimezonefive\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 12321,\n        \"created_at\": 1482429723000,\n        \"updated_at\": 1482429723000\n    },\n    {\n        \"id\": 316,\n        \"name\": \"tom test org\",\n        \"slug\": \"tto\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 500,\n        \"created_at\": 1491238310000,\n        \"updated_at\": 1491238310000\n    },\n    {\n        \"id\": 317,\n        \"name\": \"Kangaroo School\",\n        \"slug\": \"kangarooschool\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 0,\n        \"created_at\": 1491426884000,\n        \"updated_at\": 1491426884000\n    },\n    {\n        \"id\": 318,\n        \"name\": \"Platypus School\",\n        \"slug\": \"platypus\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1492784807000,\n        \"updated_at\": 1492784807000\n    },\n    {\n        \"id\": 319,\n        \"name\": \"roles test\",\n        \"slug\": \"rolestest\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 10000,\n        \"created_at\": 1503676177000,\n        \"updated_at\": 1503676177000\n    },\n    {\n        \"id\": 320,\n        \"name\": \"volunteer default schema test\",\n        \"slug\": \"volunteerdefaultschematest\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1000,\n        \"created_at\": 1504030712000,\n        \"updated_at\": 1504030712000\n    },\n    {\n        \"id\": 321,\n        \"name\": \"volunteerdefaultschematesta\",\n        \"slug\": \"volunteerdefaultschematesta\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1000,\n        \"created_at\": 1504031032000,\n        \"updated_at\": 1504031032000\n    },\n    {\n        \"id\": 322,\n        \"name\": \"volunteerdefaultschematestb\",\n        \"slug\": \"volunteerdefaultschematestb\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1504031309000,\n        \"updated_at\": 1504031309000\n    },\n    {\n        \"id\": 323,\n        \"name\": \"volunteerdefaultschematestc\",\n        \"slug\": \"volunteerdefaultschematestc\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1504031415000,\n        \"updated_at\": 1504031415000\n    },\n    {\n        \"id\": 324,\n        \"name\": \"volunteerdefaultschematestd\",\n        \"slug\": \"volunteerdefaultschematestd\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1504031572000,\n        \"updated_at\": 1504031572000\n    },\n    {\n        \"id\": 325,\n        \"name\": \"volunteerdefaultschemateste\",\n        \"slug\": \"volunteerdefaultschemateste\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1504031765000,\n        \"updated_at\": 1504031765000\n    },\n    {\n        \"id\": 326,\n        \"name\": \"volunteerdefaultschematestf\",\n        \"slug\": \"volunteerdefaultschematestf\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1504032291000,\n        \"updated_at\": 1504032291000\n    },\n    {\n        \"id\": 327,\n        \"name\": \"volunteerdefaultschematestg\",\n        \"slug\": \"volunteerdefaultschematestg\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1504032448000,\n        \"updated_at\": 1504032448000\n    },\n    {\n        \"id\": 328,\n        \"name\": \"volunteerdefaultschematesth\",\n        \"slug\": \"volunteerdefaultschematesth\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1504032785000,\n        \"updated_at\": 1504032785000\n    },\n    {\n        \"id\": 329,\n        \"name\": \"volunteerdefaultschematesti\",\n        \"slug\": \"volunteerdefaultschematesti\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1504033574000,\n        \"updated_at\": 1504033574000\n    },\n    {\n        \"id\": 330,\n        \"name\": \"volunteerdefaultschematestj\",\n        \"slug\": \"volunteerdefaultschematestj\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1504033728000,\n        \"updated_at\": 1504033728000\n    },\n    {\n        \"id\": 331,\n        \"name\": \"volunteerdefaultschematestk\",\n        \"slug\": \"volunteerdefaultschematestk\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1504034412000,\n        \"updated_at\": 1504034412000\n    },\n    {\n        \"id\": 332,\n        \"name\": \"blue team demo volunteer org A\",\n        \"slug\": \"blueteamdemovolunteerorga\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1504190050000,\n        \"updated_at\": 1504190050000\n    },\n    {\n        \"id\": 333,\n        \"name\": \"Julie Test Volunteer\",\n        \"slug\": \"julietestvolunteers\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1234,\n        \"created_at\": 1504195942000,\n        \"updated_at\": 1504195942000\n    },\n    {\n        \"id\": 334,\n        \"name\": \"createvolunteerrolesa\",\n        \"slug\": \"createvolunteerrolesa\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1504195945000,\n        \"updated_at\": 1504195945000\n    },\n    {\n        \"id\": 335,\n        \"name\": \"volunteerdefaultschematestl\",\n        \"slug\": \"volunteerdefaultschematestl\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1504198139000,\n        \"updated_at\": 1504198139000\n    },\n    {\n        \"id\": 336,\n        \"name\": \"volunteerdefaultschematestm\",\n        \"slug\": \"volunteerdefaultschematestm\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1504198281000,\n        \"updated_at\": 1504198281000\n    },\n    {\n        \"id\": 337,\n        \"name\": \"volunteerdefaultschematestn\",\n        \"slug\": \"volunteerdefaultschematestn\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1504198460000,\n        \"updated_at\": 1504198460000\n    },\n    {\n        \"id\": 338,\n        \"name\": \"volunteerdefaultschematesto\",\n        \"slug\": \"volunteerdefaultschematesto\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1504198507000,\n        \"updated_at\": 1504198507000\n    },\n    {\n        \"id\": 339,\n        \"name\": \"volunteerdefaultschematestp\",\n        \"slug\": \"volunteerdefaultschematestp\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1504199078000,\n        \"updated_at\": 1504199078000\n    },\n    {\n        \"id\": 340,\n        \"name\": \"Julie Test Volunteer\",\n        \"slug\": \"julietestvolunteerstwo\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1234,\n        \"created_at\": 1504199262000,\n        \"updated_at\": 1504199262000\n    },\n    {\n        \"id\": 341,\n        \"name\": \"volunteerdefaultschematestq\",\n        \"slug\": \"volunteerdefaultschematestq\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1504199351000,\n        \"updated_at\": 1504199351000\n    },\n    {\n        \"id\": 342,\n        \"name\": \"volunteerdefaultschematestr\",\n        \"slug\": \"volunteerdefaultschematestr\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1504199500000,\n        \"updated_at\": 1504199500000\n    },\n    {\n        \"id\": 343,\n        \"name\": \"volunteerdefaultschematests\",\n        \"slug\": \"volunteerdefaultschematests\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1504199596000,\n        \"updated_at\": 1504199596000\n    },\n    {\n        \"id\": 345,\n        \"name\": \"volunteerdefaultschematestt\",\n        \"slug\": \"volunteerdefaultschematestt\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1504199779000,\n        \"updated_at\": 1504199779000\n    },\n    {\n        \"id\": 346,\n        \"name\": \"Julie Test Volunteer Roles\",\n        \"slug\": \"julietestvolunteerroles\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1234,\n        \"created_at\": 1504199805000,\n        \"updated_at\": 1504199805000\n    },\n    {\n        \"id\": 347,\n        \"name\": \"volunteerdefaultschematestu\",\n        \"slug\": \"volunteerdefaultschematestu\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1504199863000,\n        \"updated_at\": 1504199863000\n    },\n    {\n        \"id\": 348,\n        \"name\": \"Julie Test Volunteer Roles\",\n        \"slug\": \"julietestvolunteerrolestwo\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1234,\n        \"created_at\": 1504199890000,\n        \"updated_at\": 1504199890000\n    },\n    {\n        \"id\": 349,\n        \"name\": \"volunteerdefaultschematestv\",\n        \"slug\": \"volunteerdefaultschematestv\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1504200122000,\n        \"updated_at\": 1504200122000\n    },\n    {\n        \"id\": 350,\n        \"name\": \"volunteerdefaultschematestw\",\n        \"slug\": \"volunteerdefaultschematestw\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1504200191000,\n        \"updated_at\": 1504200191000\n    },\n    {\n        \"id\": 351,\n        \"name\": \"Julie Test Volunteer Roles\",\n        \"slug\": \"julietestvolunteerrolesfive\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1234,\n        \"created_at\": 1504628216000,\n        \"updated_at\": 1504628216000\n    },\n    {\n        \"id\": 352,\n        \"name\": \"Dan Test Org\",\n        \"slug\": \"dantestorgone\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 50,\n        \"created_at\": 1505503906000,\n        \"updated_at\": 1583870494000\n    },\n    {\n        \"id\": 353,\n        \"name\": \"George Test Org\",\n        \"slug\": \"george\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 10,\n        \"created_at\": 1510935436000,\n        \"updated_at\": 1510935436000\n    },\n    {\n        \"id\": 354,\n        \"name\": \"Dartmouth College\",\n        \"slug\": \"biggreen\",\n        \"sso_method\": \"saml\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 42,\n        \"created_at\": 1513355967000,\n        \"updated_at\": 1513355967000\n    },\n    {\n        \"id\": 355,\n        \"name\": \"SSO Test Org - Primary\",\n        \"slug\": \"saml\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1517342813000,\n        \"updated_at\": 1582569176000\n    },\n    {\n        \"id\": 356,\n        \"name\": \"Volunteer Rewrite Test\",\n        \"slug\": \"volunteerrewrite\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 12000,\n        \"created_at\": 1519932680000,\n        \"updated_at\": 1519932680000\n    },\n    {\n        \"id\": 357,\n        \"name\": \"Orphaned SAML Test\",\n        \"slug\": \"osaml\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1520353039000,\n        \"updated_at\": 1582569179000\n    },\n    {\n        \"id\": 358,\n        \"name\": \"Dan Test Org (Non-SSO)\",\n        \"slug\": \"nosso\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 4,\n        \"created_at\": 1521477719000,\n        \"updated_at\": 1583423423000\n    },\n    {\n        \"id\": 359,\n        \"name\": \"MySQL Default Gate Test\",\n        \"slug\": \"mysqldefaultgatetest\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 0,\n        \"created_at\": 1522430760000,\n        \"updated_at\": 1522430760000\n    },\n    {\n        \"id\": 360,\n        \"name\": \"Events Unmatched Engagers Test\",\n        \"slug\": \"eue\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1523029362000,\n        \"updated_at\": 1523029362000\n    },\n    {\n        \"id\": 361,\n        \"name\": \"Julie Test Org Yet Again\",\n        \"slug\": \"julietestorgagain\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1234,\n        \"created_at\": 1532535541000,\n        \"updated_at\": 1532535541000\n    },\n    {\n        \"id\": 362,\n        \"name\": \"University of Virginia\",\n        \"slug\": \"uvastage\",\n        \"sso_method\": \"saml\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 700000,\n        \"created_at\": 1535051759000,\n        \"updated_at\": 1535055203000\n    },\n    {\n        \"id\": 363,\n        \"name\": \"Bowdoin College\",\n        \"slug\": \"bowdoinstage\",\n        \"sso_method\": \"saml\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 100000,\n        \"created_at\": 1535398311000,\n        \"updated_at\": 1535398535000\n    },\n    {\n        \"id\": 364,\n        \"name\": \"Weasel School\",\n        \"slug\": \"weasels\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1000000,\n        \"created_at\": 1539288727000,\n        \"updated_at\": 1539288727000\n    },\n    {\n        \"id\": 365,\n        \"name\": \"Marmoset Montessori School\",\n        \"slug\": \"marmoset\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1539289728000,\n        \"updated_at\": 1545176651000\n    },\n    {\n        \"id\": 366,\n        \"name\": \"Cornell Stage\",\n        \"slug\": \"cstage\",\n        \"sso_method\": \"saml\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1544553665000,\n        \"updated_at\": 1544553700000\n    },\n    {\n        \"id\": 367,\n        \"name\": \"RE NXT Testing\",\n        \"slug\": \"renxt\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 10000,\n        \"created_at\": 1548368251000,\n        \"updated_at\": 1645816572000\n    },\n    {\n        \"id\": 368,\n        \"name\": \"Ithaca Stage\",\n        \"slug\": \"ithacastage\",\n        \"sso_method\": \"saml\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 50000,\n        \"created_at\": 1550678143000,\n        \"updated_at\": 1551457390000\n    },\n    {\n        \"id\": 369,\n        \"name\": \"Nick's Test Org\",\n        \"slug\": \"nicktestorg\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1551279972000,\n        \"updated_at\": 1551279972000\n    },\n    {\n        \"id\": 370,\n        \"name\": \"Doug Test Org\",\n        \"slug\": \"amytestorg\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 10000,\n        \"created_at\": 1551817756000,\n        \"updated_at\": 1751568392000\n    },\n    {\n        \"id\": 371,\n        \"name\": \"Emory Stage\",\n        \"slug\": \"emorystage\",\n        \"sso_method\": \"saml\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 750000,\n        \"created_at\": 1553197214000,\n        \"updated_at\": 1553197214000\n    },\n    {\n        \"id\": 372,\n        \"name\": \"SSO Test Org - Secondary\",\n        \"slug\": \"ssotwo\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 40000,\n        \"created_at\": 1553629154000,\n        \"updated_at\": 1574716206000\n    },\n    {\n        \"id\": 373,\n        \"name\": \"Kenyon Stage\",\n        \"slug\": \"kenyonstage\",\n        \"sso_method\": \"saml\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 50000,\n        \"created_at\": 1555623763000,\n        \"updated_at\": 1555688725000\n    },\n    {\n        \"id\": 374,\n        \"name\": \"Pomona Stage\",\n        \"slug\": \"pomonastage\",\n        \"sso_method\": \"saml\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 50000,\n        \"created_at\": 1557343473000,\n        \"updated_at\": 1557343487000\n    },\n    {\n        \"id\": 375,\n        \"name\": \"Rochester Stage\",\n        \"slug\": \"rochesterstage\",\n        \"sso_method\": \"saml\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 200000,\n        \"created_at\": 1559668227000,\n        \"updated_at\": 1559668310000\n    },\n    {\n        \"id\": 378,\n        \"name\": \"Bellarmine Stage\",\n        \"slug\": \"bellarminestage\",\n        \"sso_method\": \"saml\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 10000,\n        \"created_at\": 1565289304000,\n        \"updated_at\": 1565290649000\n    },\n    {\n        \"id\": 379,\n        \"name\": \"The Ohio State University Stage\",\n        \"slug\": \"osustage\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 200000,\n        \"created_at\": 1566248929000,\n        \"updated_at\": 1566248929000\n    },\n    {\n        \"id\": 381,\n        \"name\": \"Team Blue Test Org\",\n        \"slug\": \"teambluetestorg\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1000000,\n        \"created_at\": 1568216170000,\n        \"updated_at\": 1568216170000\n    },\n    {\n        \"id\": 382,\n        \"name\": \"George Test Org v2\",\n        \"slug\": \"georgetwo\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1000,\n        \"created_at\": 1568303978000,\n        \"updated_at\": 1568303978000\n    },\n    {\n        \"id\": 385,\n        \"name\": \"Brandeis Stage\",\n        \"slug\": \"brandeisstage\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 34029,\n        \"created_at\": 1572881886000,\n        \"updated_at\": 1572881886000\n    },\n    {\n        \"id\": 386,\n        \"name\": \"Oklahoma Stage Stage\",\n        \"slug\": \"okstatestage\",\n        \"sso_method\": \"saml\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 100000,\n        \"created_at\": 1572971039000,\n        \"updated_at\": 1572971634000\n    },\n    {\n        \"id\": 387,\n        \"name\": \"Kansas State Stage\",\n        \"slug\": \"ksustage\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 10000,\n        \"created_at\": 1578942556000,\n        \"updated_at\": 1578942556000\n    },\n    {\n        \"id\": 388,\n        \"name\": \"Team Blue\",\n        \"slug\": \"teamblue\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 600000,\n        \"created_at\": 1580924392000,\n        \"updated_at\": 1580924392000\n    },\n    {\n        \"id\": 389,\n        \"name\": \"George Test Org Perf\",\n        \"slug\": \"georgeperf\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 100000,\n        \"created_at\": 1582815011000,\n        \"updated_at\": 1582815011000\n    },\n    {\n        \"id\": 390,\n        \"name\": \"Data Model Testing\",\n        \"slug\": \"datatesting\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 300000,\n        \"created_at\": 1586793062000,\n        \"updated_at\": 1586793062000\n    },\n    {\n        \"id\": 391,\n        \"name\": \"Doug's Test Org 1\",\n        \"slug\": \"dougtestorg\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 500000,\n        \"created_at\": 1591723755000,\n        \"updated_at\": 1591723755000\n    },\n    {\n        \"id\": 392,\n        \"name\": \"Doug's Test Org 2\",\n        \"slug\": \"dougtestorgtwo\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 500000,\n        \"created_at\": 1592277868000,\n        \"updated_at\": 1592277868000\n    },\n    {\n        \"id\": 393,\n        \"name\": \"Doug's Test Org 3\",\n        \"slug\": \"dougtestorgthree\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 500000,\n        \"created_at\": 1592279661000,\n        \"updated_at\": 1592279661000\n    },\n    {\n        \"id\": 394,\n        \"name\": \"ERAU Stage\",\n        \"slug\": \"eraustage\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 100000,\n        \"created_at\": 1600716023000,\n        \"updated_at\": 1600716023000\n    },\n    {\n        \"id\": 395,\n        \"name\": \"Trinity Stage\",\n        \"slug\": \"trinitystage\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 600000,\n        \"created_at\": 1600947011000,\n        \"updated_at\": 1600947011000\n    },\n    {\n        \"id\": 396,\n        \"name\": \"Embry-Riddle Stage\",\n        \"slug\": \"embryriddlestage\",\n        \"sso_method\": \"saml\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 100000,\n        \"created_at\": 1601304639000,\n        \"updated_at\": 1601307251000\n    },\n    {\n        \"id\": 397,\n        \"name\": \"Texas A&M Stage\",\n        \"slug\": \"txamtest\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 300000,\n        \"created_at\": 1603201447000,\n        \"updated_at\": 1603201447000\n    },\n    {\n        \"id\": 398,\n        \"name\": \"Auburn Stage\",\n        \"slug\": \"auburnstage\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 300000,\n        \"created_at\": 1604084396000,\n        \"updated_at\": 1604084396000\n    },\n    {\n        \"id\": 399,\n        \"name\": \"Houston Stage\",\n        \"slug\": \"houstonstage\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 200000,\n        \"created_at\": 1604416386000,\n        \"updated_at\": 1604416386000\n    },\n    {\n        \"id\": 400,\n        \"name\": \"UConn Stage\",\n        \"slug\": \"uconnstage\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 100000,\n        \"created_at\": 1607122942000,\n        \"updated_at\": 1607122942000\n    },\n    {\n        \"id\": 401,\n        \"name\": \"NC State Stage\",\n        \"slug\": \"ncstatestage\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 200000,\n        \"created_at\": 1608218604000,\n        \"updated_at\": 1608218604000\n    },\n    {\n        \"id\": 402,\n        \"name\": \"Nebraska Stage\",\n        \"slug\": \"nebraskastage\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 200000,\n        \"created_at\": 1616690042000,\n        \"updated_at\": 1616690042000\n    },\n    {\n        \"id\": 403,\n        \"name\": \"EverTrue University\",\n        \"slug\": \"etu\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 800000,\n        \"created_at\": 1616777029000,\n        \"updated_at\": 1616777029000\n    },\n    {\n        \"id\": 404,\n        \"name\": \"Paschal University\",\n        \"slug\": \"paschal\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 5000000,\n        \"created_at\": 1623874513000,\n        \"updated_at\": 1623874513000\n    },\n    {\n        \"id\": 405,\n        \"name\": \"Black Team Import Testing 1\",\n        \"slug\": \"blackteamimporter\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 500000,\n        \"created_at\": 1624280996000,\n        \"updated_at\": 1624280996000\n    },\n    {\n        \"id\": 406,\n        \"name\": \"Black Team Import Testing 2\",\n        \"slug\": \"blackteamimportertwo\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 500000,\n        \"created_at\": 1624281031000,\n        \"updated_at\": 1624281031000\n    },\n    {\n        \"id\": 407,\n        \"name\": \"Black Team Import Testing 3\",\n        \"slug\": \"blackteamimporterthree\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 500000,\n        \"created_at\": 1624281051000,\n        \"updated_at\": 1624281051000\n    },\n    {\n        \"id\": 408,\n        \"name\": \"Black Team Import Testing 4\",\n        \"slug\": \"blackteamimporterfour\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 500000,\n        \"created_at\": 1624281067000,\n        \"updated_at\": 1624281067000\n    },\n    {\n        \"id\": 409,\n        \"name\": \"Black Team Import Testing 5\",\n        \"slug\": \"blackteamimporterfive\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 500000,\n        \"created_at\": 1624281081000,\n        \"updated_at\": 1624281081000\n    },\n    {\n        \"id\": 410,\n        \"name\": \"Black Team Import Testing 6\",\n        \"slug\": \"blackteamimportersix\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 500000,\n        \"created_at\": 1624281100000,\n        \"updated_at\": 1624281100000\n    },\n    {\n        \"id\": 411,\n        \"name\": \"Black Team Import Testing 7\",\n        \"slug\": \"blackteamimporterseven\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 500000,\n        \"created_at\": 1624281115000,\n        \"updated_at\": 1624281115000\n    },\n    {\n        \"id\": 412,\n        \"name\": \"Black Team Import Testing 8\",\n        \"slug\": \"blackteamimportereight\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 500000,\n        \"created_at\": 1624281126000,\n        \"updated_at\": 1624281126000\n    },\n    {\n        \"id\": 413,\n        \"name\": \"Black Team Import Testing 9\",\n        \"slug\": \"blackteamimporternine\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 500000,\n        \"created_at\": 1624281138000,\n        \"updated_at\": 1624281138000\n    },\n    {\n        \"id\": 414,\n        \"name\": \"Black Team Import Testing 10\",\n        \"slug\": \"blackteamimporterten\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 500000,\n        \"created_at\": 1624281151000,\n        \"updated_at\": 1624281151000\n    },\n    {\n        \"id\": 415,\n        \"name\": \"St. Olaf Stage\",\n        \"slug\": \"stolafstage\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 130000,\n        \"created_at\": 1626103029000,\n        \"updated_at\": 1626103029000\n    },\n    {\n        \"id\": 416,\n        \"name\": \"Dave Test\",\n        \"slug\": \"davetest\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1630521973000,\n        \"updated_at\": 1630521973000\n    },\n    {\n        \"id\": 417,\n        \"name\": \"University of North Carolina at Charlotte Stage\",\n        \"slug\": \"unccstage\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 499999,\n        \"created_at\": 1636641676000,\n        \"updated_at\": 1636641676000\n    },\n    {\n        \"id\": 418,\n        \"name\": \"UNH Stage\",\n        \"slug\": \"unhstage\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 499999,\n        \"created_at\": 1637592398000,\n        \"updated_at\": 1637592398000\n    },\n    {\n        \"id\": 419,\n        \"name\": \"Importer Automation Testing\",\n        \"slug\": \"importerautomationtesting\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 499999,\n        \"created_at\": 1637604151000,\n        \"updated_at\": 1637604151000\n    },\n    {\n        \"id\": 420,\n        \"name\": \"Adam Automation Testing\",\n        \"slug\": \"adamautomationtesting\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 499999,\n        \"created_at\": 1643643198000,\n        \"updated_at\": 1643643198000\n    },\n    {\n        \"id\": 421,\n        \"name\": \"Seacoast Stage\",\n        \"slug\": \"seacoaststage\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 100000,\n        \"created_at\": 1643726566000,\n        \"updated_at\": 1643726566000\n    },\n    {\n        \"id\": 422,\n        \"name\": \"Black Team Importer Testing 1\",\n        \"slug\": \"blackimporter1\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 499999,\n        \"created_at\": 1643814448000,\n        \"updated_at\": 1643814448000\n    },\n    {\n        \"id\": 423,\n        \"name\": \"Black Team Importer Testing 2\",\n        \"slug\": \"blackimporter2\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 499999,\n        \"created_at\": 1643814693000,\n        \"updated_at\": 1643814693000\n    },\n    {\n        \"id\": 424,\n        \"name\": \"Black Team Importer Testing 3\",\n        \"slug\": \"blackimporter3\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 499999,\n        \"created_at\": 1643814715000,\n        \"updated_at\": 1643814715000\n    },\n    {\n        \"id\": 425,\n        \"name\": \"Black Team Importer Testing 4\",\n        \"slug\": \"blackimporter4\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 499999,\n        \"created_at\": 1643814749000,\n        \"updated_at\": 1643814749000\n    },\n    {\n        \"id\": 426,\n        \"name\": \"Black Team Importer Testing 5\",\n        \"slug\": \"blackimporter5\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 499999,\n        \"created_at\": 1643814763000,\n        \"updated_at\": 1643814763000\n    },\n    {\n        \"id\": 427,\n        \"name\": \"Black Team Importer Testing 6\",\n        \"slug\": \"blackimporter6\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 499999,\n        \"created_at\": 1643814782000,\n        \"updated_at\": 1643814782000\n    },\n    {\n        \"id\": 428,\n        \"name\": \"Black Team Importer Testing 7\",\n        \"slug\": \"blackimporter7\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 499999,\n        \"created_at\": 1643814798000,\n        \"updated_at\": 1643814798000\n    },\n    {\n        \"id\": 429,\n        \"name\": \"Black Team Importer Testing 8\",\n        \"slug\": \"blackimporter8\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 499999,\n        \"created_at\": 1643814814000,\n        \"updated_at\": 1643814814000\n    },\n    {\n        \"id\": 430,\n        \"name\": \"Naomi's Test Org\",\n        \"slug\": \"naomitest\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 10000,\n        \"created_at\": 1645548446000,\n        \"updated_at\": 1645548446000\n    },\n    {\n        \"id\": 431,\n        \"name\": \"Doug Test Org 5\",\n        \"slug\": \"dougtestorgaga\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 100000,\n        \"created_at\": 1646189965000,\n        \"updated_at\": 1646189965000\n    },\n    {\n        \"id\": 432,\n        \"name\": \"Data Sync Test 1\",\n        \"slug\": \"dstest1\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 50000,\n        \"created_at\": 1650992176000,\n        \"updated_at\": 1650992176000\n    },\n    {\n        \"id\": 433,\n        \"name\": \"Data Sync Test 2\",\n        \"slug\": \"dstest2\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 50000,\n        \"created_at\": 1650992192000,\n        \"updated_at\": 1650992192000\n    },\n    {\n        \"id\": 434,\n        \"name\": \"Data Sync Test 3\",\n        \"slug\": \"dstest3\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 50000,\n        \"created_at\": 1650992206000,\n        \"updated_at\": 1650992206000\n    },\n    {\n        \"id\": 435,\n        \"name\": \"Tag Service Test Stage\",\n        \"slug\": \"tagstestingstage\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 100000,\n        \"created_at\": 1651683939000,\n        \"updated_at\": 1651683939000\n    },\n    {\n        \"id\": 436,\n        \"name\": \"Bethany's Test Org Stage\",\n        \"slug\": \"bseegerstage\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 100000,\n        \"created_at\": 1651686945000,\n        \"updated_at\": 1651686945000\n    },\n    {\n        \"id\": 437,\n        \"name\": \"University of Northern Iowa Stage\",\n        \"slug\": \"unistage\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 100000,\n        \"created_at\": 1654099584000,\n        \"updated_at\": 1654099584000\n    },\n    {\n        \"id\": 438,\n        \"name\": \"Josh Mickley Test Org\",\n        \"slug\": \"joshmickley\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 499999,\n        \"created_at\": 1658770489000,\n        \"updated_at\": 1658770489000\n    },\n    {\n        \"id\": 439,\n        \"name\": \"Ura Test\",\n        \"slug\": \"uratest\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": true,\n        \"max_contact_count\": 499999,\n        \"created_at\": 1667920024000,\n        \"updated_at\": 1667920024000\n    },\n    {\n        \"id\": 440,\n        \"name\": \"University of North Carolina Greensboro Stage\",\n        \"slug\": \"uncgstage\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 100000,\n        \"created_at\": 1669736672000,\n        \"updated_at\": 1669736672000\n    },\n    {\n        \"id\": 441,\n        \"name\": \"Matthew Joseph Test Org\",\n        \"slug\": \"matthewjoseph\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 499999,\n        \"created_at\": 1670524581000,\n        \"updated_at\": 1670524581000\n    },\n    {\n        \"id\": 442,\n        \"name\": \"Boston University - SSO Test\",\n        \"slug\": \"ssobu\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 100000,\n        \"created_at\": 1671199058000,\n        \"updated_at\": 1671199058000\n    },\n    {\n        \"id\": 443,\n        \"name\": \"Spruce Team 1\",\n        \"slug\": \"spruceone\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 499999,\n        \"created_at\": 1674660013000,\n        \"updated_at\": 1674660013000\n    },\n    {\n        \"id\": 444,\n        \"name\": \"Jay Son Test Org\",\n        \"slug\": \"jayson\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 499999,\n        \"created_at\": 1675176566000,\n        \"updated_at\": 1675176566000\n    },\n    {\n        \"id\": 445,\n        \"name\": \"RE NXT Testing 2\",\n        \"slug\": \"renxttestingtwo\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 123456,\n        \"created_at\": 1677166139000,\n        \"updated_at\": 1677166139000\n    },\n    {\n        \"id\": 446,\n        \"name\": \"Test RE NXT Testing\",\n        \"slug\": \"testrenxt\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 499999,\n        \"created_at\": 1677168146000,\n        \"updated_at\": 1677168148000\n    },\n    {\n        \"id\": 447,\n        \"name\": \"Dave Test Three\",\n        \"slug\": \"davetestthree\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 499999,\n        \"created_at\": 1720797112000,\n        \"updated_at\": 1720797112000\n    },\n    {\n        \"id\": 448,\n        \"name\": \"Dinesh ES test org\",\n        \"slug\": \"DineshESTest\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1721895575000,\n        \"updated_at\": 1721895575000\n    },\n    {\n        \"id\": 449,\n        \"name\": \"Dinesh ES test org2\",\n        \"slug\": \"DineshESTest2\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1722418100000,\n        \"updated_at\": 1722418100000\n    },\n    {\n        \"id\": 450,\n        \"name\": \"Dinesh ES test org3\",\n        \"slug\": \"DineshESTest3\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1722418327000,\n        \"updated_at\": 1722418327000\n    },\n    {\n        \"id\": 451,\n        \"name\": \"Dinesh ES test org4\",\n        \"slug\": \"DineshESTest4\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1722418812000,\n        \"updated_at\": 1722418812000\n    },\n    {\n        \"id\": 453,\n        \"name\": \"Dinesh ES test org6\",\n        \"slug\": \"DineshESTest6\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1722447361000,\n        \"updated_at\": 1722447361000\n    },\n    {\n        \"id\": 454,\n        \"name\": \"adam-test-org\",\n        \"slug\": \"adamtestorg\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 0,\n        \"created_at\": 1722529982000,\n        \"updated_at\": 1722529982000\n    },\n    {\n        \"id\": 455,\n        \"name\": \"Sneh SF Test Org\",\n        \"slug\": \"snehtestorg\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1723127575000,\n        \"updated_at\": 1723127575000\n    },\n    {\n        \"id\": 456,\n        \"name\": \"Adam Migration test 1\",\n        \"slug\": \"adammigrationone\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1723132594000,\n        \"updated_at\": 1723132594000\n    },\n    {\n        \"id\": 458,\n        \"name\": \"Adam Migration Test 2\",\n        \"slug\": \"migrationtwo\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 0,\n        \"created_at\": 1723583010000,\n        \"updated_at\": 1723583010000\n    },\n    {\n        \"id\": 459,\n        \"name\": \"Test Data Sync RE NXT\",\n        \"slug\": \"testdsrenxt\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 999999,\n        \"created_at\": 1726259551000,\n        \"updated_at\": 1726259551000\n    },\n    {\n        \"id\": 460,\n        \"name\": \"Test Data Sync BB CRM\",\n        \"slug\": \"testdsbbcrm\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 999999,\n        \"created_at\": 1726516863000,\n        \"updated_at\": 1726516863000\n    },\n    {\n        \"id\": 461,\n        \"name\": \"Test Data Sync SF NPSP\",\n        \"slug\": \"testdssfnpsp\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 999999,\n        \"created_at\": 1726518027000,\n        \"updated_at\": 1726518027000\n    },\n    {\n        \"id\": 462,\n        \"name\": \"search-ci\",\n        \"slug\": \"searchci\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 0,\n        \"created_at\": 1736874113000,\n        \"updated_at\": 1736874113000\n    },\n    {\n        \"id\": 463,\n        \"name\": \"Swan\",\n        \"slug\": \"swan\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1740415388000,\n        \"updated_at\": 1740415388000\n    },\n    {\n        \"id\": 464,\n        \"name\": \"Test Org\",\n        \"slug\": \"testorg\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1742478996000,\n        \"updated_at\": 1742478996000\n    },\n    {\n        \"id\": 465,\n        \"name\": \"Test Org 3\",\n        \"slug\": \"testorgthree\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1742479235000,\n        \"updated_at\": 1742479235000\n    },\n    {\n        \"id\": 466,\n        \"name\": \"Contacts Spark CI\",\n        \"slug\": \"contactssparkci\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1748368368000,\n        \"updated_at\": 1748368368000\n    },\n    {\n        \"id\": 467,\n        \"name\": \"SwanTests\",\n        \"slug\": \"swantests\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 10,\n        \"created_at\": 1748610420000,\n        \"updated_at\": 1748610420000\n    },\n    {\n        \"id\": 468,\n        \"name\": \"UGC CI\",\n        \"slug\": \"ugcci\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1752000081000,\n        \"updated_at\": 1752000081000\n    },\n    {\n        \"id\": 469,\n        \"name\": \"Contacts CI\",\n        \"slug\": \"contactsci\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 1,\n        \"created_at\": 1752500677000,\n        \"updated_at\": 1752500677000\n    },\n    {\n        \"id\": 470,\n        \"name\": \"Swan_solid state\",\n        \"slug\": \"swan470\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1753784560000,\n        \"updated_at\": 1754295449000\n    },\n    {\n        \"id\": 471,\n        \"name\": \"Assignments CI\",\n        \"slug\": \"assignmentsci\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": 100,\n        \"created_at\": 1754472884000,\n        \"updated_at\": 1754472884000\n    },\n    {\n        \"id\": 472,\n        \"name\": \"Sergio Ondricka h -updated\",\n        \"slug\": \"champlain\",\n        \"sso_method\": \"disabled\",\n        \"mfa_required\": false,\n        \"max_contact_count\": null,\n        \"created_at\": 1755249257000,\n        \"updated_at\": 1755249565000\n    }\n]"
								}
							]
						}
					]
				},
				{
					"name": "Organization Purge",
					"item": [
						{
							"name": "Request an organization purge",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// pm.test(\"Status code is 200\", function () {\r",
											"//     pm.response.to.have.status(200);\r",
											"// });\r",
											"\r",
											"// pm.test(\"Response matches the expected schema\", function () {\r",
											"//     let idOrganizationSchema = JSON.parse(pm.variables.get(\"idOrganization\"))\r",
											"        \r",
											"//         pm.response.to.have.jsonSchema(idOrganizationSchema);\r",
											"// });\r",
											"\r",
											"// var jsonData = pm.response.json();\r",
											"// pm.environment.set(\"purge_token\", jsonData.purge_token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/organizations/{{new_organization_id}}/purge",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"organizations",
										"{{new_organization_id}}",
										"purge"
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm the purge",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// pm.test(\"Status code is 200\", function () {\r",
											"//     pm.response.to.have.status(200);\r",
											"// });\r",
											"\r",
											"// pm.test(\"Response matches the expected schema\", function () {\r",
											"//     let idOrganizationSchema = JSON.parse(pm.variables.get(\"idOrganization\"))\r",
											"        \r",
											"//         pm.response.to.have.jsonSchema(idOrganizationSchema);\r",
											"// });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/organizations/{{new_organization_id}}?purge_token={{purge_token}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"organizations",
										"{{new_organization_id}}"
									],
									"query": [
										{
											"key": "purge_token",
											"value": "{{purge_token}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Affiliations",
					"item": [
						{
							"name": "Auth Prime Token auth_api Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"auth_token\", jsonData.token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "p0o9P)O(p0o9P)O(",
											"type": "string"
										},
										{
											"key": "username",
											"value": "vasyl.babych@evertrue.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueBasicAuth",
										"type": "text"
									},
									{
										"key": "host",
										"value": "stage-api.evertrue.com",
										"type": "text"
									},
									{
										"key": "Device-ID",
										"value": "{{Device-ID}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/session",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"session"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a user's affiliation(s)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let idAffiliationSchema = JSON.parse(pm.variables.get(\"idAffiliation\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(idAffiliationSchema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/users/2303/affiliations",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"users",
										"2303",
										"affiliations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a new affiliation (admin endpoint)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let newAffiliationSchema = JSON.parse(pm.variables.get(\"newAffiliation\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(newAffiliationSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"pm.environment.set(\"affiliation_id\", jsonData.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"user_id\": 2303,\r\n  \"role_ids\": [1646, 1645, 1647]\r\n}\r\n\r\n\r\n// user_id with appropriate auth_token, role_ids of org from Console, contact_id fron Constituents ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/affiliations?oid=467",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"affiliations"
									],
									"query": [
										{
											"key": "oid",
											"value": "467"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Overwrite all of a user's affiliation roles (admin endpoint)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let updateAffiliationSchema = JSON.parse(pm.variables.get(\"updateAffiliation\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(updateAffiliationSchema);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"role_ids\": [1648]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/affiliations/{{affiliation_id}}?oid=467",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"affiliations",
										"{{affiliation_id}}"
									],
									"query": [
										{
											"key": "oid",
											"value": "467"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a user's contact ID or other affiliation properties (admin endpoint)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let updateAffiliationSchema = JSON.parse(pm.variables.get(\"updateAffiliation\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(updateAffiliationSchema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"contact_id\": 14625939,\r\n  \"role_ids\": [1645]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/affiliations/{{affiliation_id}}?oid=467",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"affiliations",
										"{{affiliation_id}}"
									],
									"query": [
										{
											"key": "oid",
											"value": "467"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a user's contact ID or other affiliation properties (admin endpoint) Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let updateAffiliationSchema = JSON.parse(pm.variables.get(\"updateAffiliation\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(updateAffiliationSchema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"role_ids\": [1645, 1647, 1648]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/affiliations/{{affiliation_id}}?oid=467",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"affiliations",
										"{{affiliation_id}}"
									],
									"query": [
										{
											"key": "oid",
											"value": "467"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove a user from an organization / revoke affiliation (admin endpoint)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/affiliations/{{affiliation_id}}?oid=467",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"affiliations",
										"{{affiliation_id}}"
									],
									"query": [
										{
											"key": "oid",
											"value": "467"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Affiliation Roles",
					"item": [
						{
							"name": "Auth Prime Token auth_api Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"auth_token\", jsonData.token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "p0o9P)O(p0o9P)O(",
											"type": "string"
										},
										{
											"key": "username",
											"value": "vasyl.babych@evertrue.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueBasicAuth",
										"type": "text"
									},
									{
										"key": "host",
										"value": "stage-api.evertrue.com",
										"type": "text"
									},
									{
										"key": "Device-ID",
										"value": "{{Device-ID}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/session",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"session"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a new affiliation (admin endpoint) ROLES collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let newAffiliationSchema = JSON.parse(pm.variables.get(\"newAffiliation\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(newAffiliationSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"pm.environment.set(\"affiliation_id\", jsonData.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"user_id\": 2303,\r\n  \"role_ids\": [1646, 1645, 1647]\r\n}\r\n\r\n\r\n// user_id with appropriate auth_token, role_ids of org from Console, contact_id fron Constituents ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{et_host}}/auth/affiliations?oid=467",
									"host": [
										"{{et_host}}"
									],
									"path": [
										"auth",
										"affiliations"
									],
									"query": [
										{
											"key": "oid",
											"value": "467"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all roles a user has for an affiliation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let idAffiliationRolesSchema = JSON.parse(pm.variables.get(\"idAffiliationRoles\"))\r",
											"        pm.response.to.have.jsonSchema(idAffiliationRolesSchema);\r",
											"});\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"pm.environment.set(\"affiliation_role\", jsonData[0].id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/affiliations/{{affiliation_id}}/affiliation_roles",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"affiliations",
										"{{affiliation_id}}",
										"affiliation_roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a specific affiliation role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let getAffiliationRoleSchema = JSON.parse(pm.variables.get(\"getAffiliationRole\"))\r",
											"        pm.response.to.have.jsonSchema(getAffiliationRoleSchema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/affiliations/{{affiliation_id}}/affiliation_roles/{{affiliation_role}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"affiliations",
										"{{affiliation_id}}",
										"affiliation_roles",
										"{{affiliation_role}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a specific affiliation role OR variant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let getAffiliationRoleSchema = JSON.parse(pm.variables.get(\"getAffiliationRole\"))\r",
											"        pm.response.to.have.jsonSchema(getAffiliationRoleSchema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/affiliation_roles/{{affiliation_role}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"affiliation_roles",
										"{{affiliation_role}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove a role from a user's affiliation (admin endpoint)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/affiliations/{{affiliation_id}}/affiliation_roles/{{affiliation_role}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"affiliations",
										"{{affiliation_id}}",
										"affiliation_roles",
										"{{affiliation_role}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove a user from an organization / revoke affiliation (admin endpoint) Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/affiliations/{{affiliation_id}}?oid=467",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"affiliations",
										"{{affiliation_id}}"
									],
									"query": [
										{
											"key": "oid",
											"value": "467"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a new affiliation (admin endpoint) ROLES collection 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let newAffiliationSchema = JSON.parse(pm.variables.get(\"newAffiliation\"))\r",
											"        pm.response.to.have.jsonSchema(newAffiliationSchema);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"pm.environment.set(\"affiliation_id\", jsonData.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"user_id\": 2303,\r\n  \"role_ids\": [1646, 1645, 1647]\r\n}\r\n\r\n\r\n// user_id with appropriate auth_token, role_ids of org from Console, contact_id fron Constituents ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/affiliations?oid=467",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"affiliations"
									],
									"query": [
										{
											"key": "oid",
											"value": "467"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all roles a user has for an affiliation 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let idAffiliationRolesSchema = JSON.parse(pm.variables.get(\"idAffiliationRoles\"))\r",
											"        pm.response.to.have.jsonSchema(idAffiliationRolesSchema);\r",
											"});\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"pm.environment.set(\"affiliation_role\", jsonData[0].id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/affiliations/{{affiliation_id}}/affiliation_roles",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"affiliations",
										"{{affiliation_id}}",
										"affiliation_roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove a role from a user's affiliation (admin endpoint) OR variant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/affiliation_roles/{{affiliation_role}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"affiliation_roles",
										"{{affiliation_role}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove a user from an organization / revoke affiliation (admin endpoint) Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/affiliations/{{affiliation_id}}?oid=467",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"affiliations",
										"{{affiliation_id}}"
									],
									"query": [
										{
											"key": "oid",
											"value": "467"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Affiliation Requests",
					"item": [
						{
							"name": "Auth Prime Token auth_api",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"auth_token\", jsonData.token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "p0o9P)O(p0o9P)O(",
											"type": "string"
										},
										{
											"key": "username",
											"value": "vasyl.babych@evertrue.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueBasicAuth",
										"type": "text"
									},
									{
										"key": "host",
										"value": "stage-api.evertrue.com",
										"type": "text"
									},
									{
										"key": "Device-ID",
										"value": "{{Device-ID}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/session",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"session"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get moderation requests (for admins)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let moderationRequestsSchema = JSON.parse(pm.variables.get(\"moderationRequests\"))\r",
											"        pm.response.to.have.jsonSchema(moderationRequestsSchema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/affiliation_requests?oid=464",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"affiliation_requests"
									],
									"query": [
										{
											"key": "oid",
											"value": "464"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "\"Dry Run\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let dryRunSchema = JSON.parse(pm.variables.get(\"dryRun\"))\r",
											"        pm.response.to.have.jsonSchema(dryRunSchema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"commit\": false,\r\n  \"data\": {\r\n    \"class_year\": 2008,\r\n    \"previous_last_name\": \"Smith\",\r\n    \"other_custom_key\": \"ExampleValue\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{et_host}}/auth/affiliation_requests?oid=469",
									"host": [
										"{{et_host}}"
									],
									"path": [
										"auth",
										"affiliation_requests"
									],
									"query": [
										{
											"key": "oid",
											"value": "469"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Request access to an organization (for users)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let requestAccessSchema = JSON.parse(pm.variables.get(\"requestAccess\"))\r",
											"        pm.response.to.have.jsonSchema(requestAccessSchema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"commit\": true,\r\n    \"data\": {\r\n        \"class_year\": 2009,\r\n        \"previous_last_name\": \"YK4_V3\",\r\n        \"other_custom_key\": \"valueTest\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/affiliation_requests?oid=470",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"affiliation_requests"
									],
									"query": [
										{
											"key": "oid",
											"value": "470"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Moderate an affiliation request True",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let affiliationRequestApproved = JSON.parse(pm.variables.get(\"affiliationRequestAppd\"))\r",
											"        pm.response.to.have.jsonSchema(affiliationRequestApproved);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"role_ids\": [1664],\r\n    \"approve\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/affiliation_requests/409/moderate?oid=470",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"affiliation_requests",
										"409",
										"moderate"
									],
									"query": [
										{
											"key": "oid",
											"value": "470"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Moderate an affiliation request False",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let affiliationRequestDnd = JSON.parse(pm.variables.get(\"affiliationRequestDenied\"))\r",
											"        pm.response.to.have.jsonSchema(affiliationRequestDnd);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"approve\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/affiliation_requests/409/moderate?oid=470",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"affiliation_requests",
										"409",
										"moderate"
									],
									"query": [
										{
											"key": "oid",
											"value": "470"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Affiliation Invitations",
					"item": [
						{
							"name": "List invitations for organization (admin endpoint)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let affiliationInvitationSchema = JSON.parse(pm.variables.get(\"affiliationInvitation\"))\r",
											"        pm.response.to.have.jsonSchema(affiliationInvitationSchema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/affiliation_invitations?oid=463&app=all",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"affiliation_invitations"
									],
									"query": [
										{
											"key": "oid",
											"value": "463"
										},
										{
											"key": "app",
											"value": "all"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create affiliation invitation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let affiliationInvitationCreateSchema = JSON.parse(pm.variables.get(\"affiliationInvitationPOST\"))\r",
											"        pm.response.to.have.jsonSchema(affiliationInvitationCreateSchema);\r",
											"});\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"pm.environment.set(\"aff_inv_id\", jsonData.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"app\": \"givingtree\",\n    \"name\": \"Yaroslav1\",\n    \"contact_id\": null,\n    \"email\": \"yaroslavkondria+test1@gmail.com\",\n    \"role_ids\": [\n        1616\n    ]\n}"
								},
								"url": {
									"raw": "{{et_host}}/auth/affiliation_invitations?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
									"host": [
										"{{et_host}}"
									],
									"path": [
										"auth",
										"affiliation_invitations"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										}
									]
								},
								"description": "Invite a user to the volunteer app. "
							},
							"response": [
								{
									"name": "Success - Create affiliation invitation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json; charset=UTF-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Lori Smith\",\n    \"email\": \"amyblueet+lorismith@gmail.com\",\n    \"contact_id\": 4719404,\n    \"app\": \"volunteers\",\n    \"role_ids\": [\n        1095\n    ]\n}"
										},
										"url": {
											"raw": "{{et_host}}/auth/affiliation_invitations?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
											"host": [
												"{{et_host}}"
											],
											"path": [
												"auth",
												"affiliation_invitations"
											],
											"query": [
												{
													"key": "oid",
													"value": "{{et_oid}}"
												},
												{
													"key": "app_key",
													"value": "{{app_key_givingtree}}"
												},
												{
													"key": "auth",
													"value": "{{auth_token}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 04 Sep 2019 13:56:49 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Status",
											"value": "200 OK"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Request-Id",
											"value": "916ae634-32cb-42aa-aa3a-e898ddcaf28c"
										},
										{
											"key": "X-Runtime",
											"value": "0.297133"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Powered-By",
											"value": "Phusion Passenger 5.0.29"
										},
										{
											"key": "Server",
											"value": "nginx/1.10.1 + Phusion Passenger 5.0.29"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": 1732,\n    \"invited_by\": 1741,\n    \"email\": \"amyblueet+lorismith@gmail.com\",\n    \"name\": \"Lori Smith\",\n    \"contact_id\": 4719404,\n    \"role_ids\": [\n        \"1095\"\n    ],\n    \"affiliation_id\": null,\n    \"application_name\": \"volunteers\",\n    \"saml_user_id\": null,\n    \"created_at\": 1567605409668,\n    \"updated_at\": 1567605409668,\n    \"accepted_at\": null,\n    \"invite_email_sent_at\": null\n}"
								}
							]
						},
						{
							"name": "Retrieve an existing invitation (admin endpoint)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let affiliationInvitationIdSchema = JSON.parse(pm.variables.get(\"affiliationInvitationId\"))\r",
											"        pm.response.to.have.jsonSchema(affiliationInvitationIdSchema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/affiliation_invitations/{{aff_inv_id}}?oid={{et_oid}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"affiliation_invitations",
										"{{aff_inv_id}}"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete AFF inv",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{et_host}}/auth/affiliation_invitations/{{aff_inv_id}}?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
									"host": [
										"{{et_host}}"
									],
									"path": [
										"auth",
										"affiliation_invitations",
										"{{aff_inv_id}}"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										}
									]
								},
								"description": "Looks up an affiliation invitation by its affiliation invitation id and removes it if found. The app that the invitation is related to is required in the body of the request."
							},
							"response": [
								{
									"name": "Failed - Delete affiliation invitation",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json; charset=UTF-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"app\": \"volunteers\"\n}"
										},
										"url": {
											"raw": "{{et_host}}/auth/affiliation_invitations/1687?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
											"host": [
												"{{et_host}}"
											],
											"path": [
												"auth",
												"affiliation_invitations",
												"1687"
											],
											"query": [
												{
													"key": "oid",
													"value": "{{et_oid}}"
												},
												{
													"key": "app_key",
													"value": "{{app_key_givingtree}}"
												},
												{
													"key": "auth",
													"value": "{{auth_token}}"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 04 Sep 2019 13:56:02 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Status",
											"value": "404 Not Found"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Request-Id",
											"value": "54d27bf2-336f-4f57-9531-5b82c15a4598"
										},
										{
											"key": "X-Runtime",
											"value": "0.041551"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Powered-By",
											"value": "Phusion Passenger 5.0.29"
										},
										{
											"key": "Server",
											"value": "nginx/1.10.1 + Phusion Passenger 5.0.29"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"Affiliation invitation not found.\"\n}"
								},
								{
									"name": "Success - Delete affiliation invitation",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json; charset=UTF-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"app\": \"volunteers\"\n}"
										},
										"url": {
											"raw": "{{et_host}}/auth/affiliation_invitations/1732?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
											"host": [
												"{{et_host}}"
											],
											"path": [
												"auth",
												"affiliation_invitations",
												"1732"
											],
											"query": [
												{
													"key": "oid",
													"value": "{{et_oid}}"
												},
												{
													"key": "app_key",
													"value": "{{app_key_givingtree}}"
												},
												{
													"key": "auth",
													"value": "{{auth_token}}"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 04 Sep 2019 13:57:10 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Status",
											"value": "204 No Content"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Request-Id",
											"value": "541f7dfc-ea69-4621-83c4-3724be06b09e"
										},
										{
											"key": "X-Runtime",
											"value": "0.045840"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Powered-By",
											"value": "Phusion Passenger 5.0.29"
										},
										{
											"key": "Server",
											"value": "nginx/1.10.1 + Phusion Passenger 5.0.29"
										}
									],
									"cookie": [],
									"body": null
								}
							]
						},
						{
							"name": "Sending a bulk invitation for an SSO-enabled organization",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"affiliation_invitations\": \n  [\n    {\n      \"email\": \"yaroslav.kondria@evertrue.com\",          // required\n      \"saml_user_id\": \"admin1\",                      // required\n      \"role_name\": \"owner\",                          // required\n      \"first_name\": \"first\",                         // required\n      \"last_name\": \"last\"                            // required\n    },\n    {\n      \"email\": \"yaroslavkondria@gmail.com\",            // required\n      \"saml_user_id\": \"justanormalusername\",               // required\n      \"role_name\": \"user\",                                 // required\n      \"first_name\": \"first1\",                               // required\n      \"last_name\": \"last1\"                                  // required\n    },\n    {\n      \"email\": \"vasyl.babych@evertrue.com\",              // required\n      \"saml_user_id\": \"justanormalusername\",             // required\n      \"role_name\": \"user\",                               // required\n      \"first_name\": \"first2\",                             // required\n      \"last_name\": \"last2\"                                // required\n    }\n  ]\n}"
								},
								"url": {
									"raw": "{{et_host}}/auth/affiliation_invitations/bulk?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
									"host": [
										"{{et_host}}"
									],
									"path": [
										"auth",
										"affiliation_invitations",
										"bulk"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										}
									]
								},
								"description": "Invite a user to the volunteer app. "
							},
							"response": [
								{
									"name": "Success - Create affiliation invitation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json; charset=UTF-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Lori Smith\",\n    \"email\": \"amyblueet+lorismith@gmail.com\",\n    \"contact_id\": 4719404,\n    \"app\": \"volunteers\",\n    \"role_ids\": [\n        1095\n    ]\n}"
										},
										"url": {
											"raw": "{{et_host}}/auth/affiliation_invitations?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
											"host": [
												"{{et_host}}"
											],
											"path": [
												"auth",
												"affiliation_invitations"
											],
											"query": [
												{
													"key": "oid",
													"value": "{{et_oid}}"
												},
												{
													"key": "app_key",
													"value": "{{app_key_givingtree}}"
												},
												{
													"key": "auth",
													"value": "{{auth_token}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 04 Sep 2019 13:56:49 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Status",
											"value": "200 OK"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Request-Id",
											"value": "916ae634-32cb-42aa-aa3a-e898ddcaf28c"
										},
										{
											"key": "X-Runtime",
											"value": "0.297133"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Powered-By",
											"value": "Phusion Passenger 5.0.29"
										},
										{
											"key": "Server",
											"value": "nginx/1.10.1 + Phusion Passenger 5.0.29"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": 1732,\n    \"invited_by\": 1741,\n    \"email\": \"amyblueet+lorismith@gmail.com\",\n    \"name\": \"Lori Smith\",\n    \"contact_id\": 4719404,\n    \"role_ids\": [\n        \"1095\"\n    ],\n    \"affiliation_id\": null,\n    \"application_name\": \"volunteers\",\n    \"saml_user_id\": null,\n    \"created_at\": 1567605409668,\n    \"updated_at\": 1567605409668,\n    \"accepted_at\": null,\n    \"invite_email_sent_at\": null\n}"
								}
							]
						},
						{
							"name": "Cancel an invitation (admin endpoint)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAppToken",
										"disabled": true
									},
									{
										"key": "app_key",
										"value": "{{app_key_givingtree}}",
										"disabled": true
									},
									{
										"key": "Device-ID",
										"value": "{{auth_device_id}}",
										"disabled": true
									},
									{
										"key": "auth",
										"value": "{{auth_token}}"
									},
									{
										"key": "app",
										"value": "all",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user\": {\n        \"email\": \"Dana.Ward17362@example.com\",\n        \"name\": \"Dana.Ward1736\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{et_host}}/auth/affiliation_invitations?oid=419&app_key={{app_key_givingtree}}&auth={{auth_token}}",
									"host": [
										"{{et_host}}"
									],
									"path": [
										"auth",
										"affiliation_invitations"
									],
									"query": [
										{
											"key": "oid",
											"value": "419"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Accept an Invitation (user endpoint)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAppToken",
										"disabled": true
									},
									{
										"key": "app_key",
										"value": "{{app_key_givingtree}}",
										"disabled": true
									},
									{
										"key": "Device-ID",
										"value": "{{auth_device_id}}",
										"disabled": true
									},
									{
										"key": "auth",
										"value": "{{auth_token}}"
									},
									{
										"key": "app",
										"value": "all",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user\": {\n        \"email\": \"Dana.Ward17362@example.com\",\n        \"name\": \"Dana.Ward1736\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{et_host}}/auth/affiliation_invitations?oid=419&app_key={{app_key_givingtree}}&auth={{auth_token}}",
									"host": [
										"{{et_host}}"
									],
									"path": [
										"auth",
										"affiliation_invitations"
									],
									"query": [
										{
											"key": "oid",
											"value": "419"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create affiliation invitation Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"affiliationInvitationPOSTSearch\"))\r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"limit\": 2,\r\n    \"page\": 2\r\n}"
								},
								"url": {
									"raw": "{{et_host}}/auth/affiliation_invitations/search?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}&app=all",
									"host": [
										"{{et_host}}"
									],
									"path": [
										"auth",
										"affiliation_invitations",
										"search"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										},
										{
											"key": "app",
											"value": "all"
										}
									]
								},
								"description": "Invite a user to the volunteer app. "
							},
							"response": [
								{
									"name": "Success - Create affiliation invitation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json; charset=UTF-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Lori Smith\",\n    \"email\": \"amyblueet+lorismith@gmail.com\",\n    \"contact_id\": 4719404,\n    \"app\": \"volunteers\",\n    \"role_ids\": [\n        1095\n    ]\n}"
										},
										"url": {
											"raw": "{{et_host}}/auth/affiliation_invitations?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
											"host": [
												"{{et_host}}"
											],
											"path": [
												"auth",
												"affiliation_invitations"
											],
											"query": [
												{
													"key": "oid",
													"value": "{{et_oid}}"
												},
												{
													"key": "app_key",
													"value": "{{app_key_givingtree}}"
												},
												{
													"key": "auth",
													"value": "{{auth_token}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 04 Sep 2019 13:56:49 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Status",
											"value": "200 OK"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Request-Id",
											"value": "916ae634-32cb-42aa-aa3a-e898ddcaf28c"
										},
										{
											"key": "X-Runtime",
											"value": "0.297133"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Powered-By",
											"value": "Phusion Passenger 5.0.29"
										},
										{
											"key": "Server",
											"value": "nginx/1.10.1 + Phusion Passenger 5.0.29"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": 1732,\n    \"invited_by\": 1741,\n    \"email\": \"amyblueet+lorismith@gmail.com\",\n    \"name\": \"Lori Smith\",\n    \"contact_id\": 4719404,\n    \"role_ids\": [\n        \"1095\"\n    ],\n    \"affiliation_id\": null,\n    \"application_name\": \"volunteers\",\n    \"saml_user_id\": null,\n    \"created_at\": 1567605409668,\n    \"updated_at\": 1567605409668,\n    \"accepted_at\": null,\n    \"invite_email_sent_at\": null\n}"
								}
							]
						}
					],
					"description": "Requests that are used to manage invitations to the apps."
				},
				{
					"name": "Affiliation Attributes",
					"item": [
						{
							"name": "Auth Token YK Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"auth_token\", jsonData.token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "yaroslav.kondria@evertrue.com",
											"type": "string"
										},
										{
											"key": "password",
											"value": "YAROSLAV20!yaroslav",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{app_key_givingtree}}",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueBasicAuth",
										"type": "text"
									},
									{
										"key": "host",
										"value": "stage-api.evertrue.com",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/skiff",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"skiff"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a new affiliation (admin endpoint) Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let newAffiliationSchema = JSON.parse(pm.variables.get(\"newAffiliation\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(newAffiliationSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"pm.environment.set(\"affiliation_id\", jsonData.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"user_id\": 2303,\r\n  \"role_ids\": [1646, 1645, 1647]\r\n}\r\n\r\n\r\n// user_id with appropriate auth_token, role_ids of org from Console, contact_id fron Constituents ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/affiliations?oid=467",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"affiliations"
									],
									"query": [
										{
											"key": "oid",
											"value": "467"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Affiliation Attributes for User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let affiliationAttributesSchema = JSON.parse(pm.variables.get(\"affiliationAttributes\"))\r",
											"        pm.response.to.have.jsonSchema(affiliationAttributesSchema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/affiliation_attributes?oid=463",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"affiliation_attributes"
									],
									"query": [
										{
											"key": "oid",
											"value": "463"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Affiliation Attributes by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let affiliationAttributesIdSchema = JSON.parse(pm.variables.get(\"affiliationAttributes\"))\r",
											"        pm.response.to.have.jsonSchema(affiliationAttributesIdSchema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/affiliation_attributes/1624?oid=467",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"affiliation_attributes",
										"1624"
									],
									"query": [
										{
											"key": "oid",
											"value": "467"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Affiliation Attributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let postAffiliationAttributeSchema = JSON.parse(pm.variables.get(\"postAffiliationAttribute\"))\r",
											"        pm.response.to.have.jsonSchema(postAffiliationAttributeSchema);\r",
											"});\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"pm.environment.set(\"affiliation_attribute_id\", jsonData.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"Swan_{{$randomAdjective}}\",\r\n    \"persona\": \"Other\",\r\n    \"seniority\": \"President / VP / Executive Director\",\r\n    \"user_profile_picture_url\": \"https://stage-api.evertrue.com/lids/users/4567/linkedin/avatar\",\r\n    \"user_profile_picture_source\": \"sodas\",\r\n    \"user_profile_picture_last_updated\": \"2021-07-07T01:00:47.000Z\",\r\n    \"nps_score\": 5,\r\n    \"nps_score_date\": \"2021-07-07T01:00:47.000Z\",\r\n    \"created_at\": 1566421553000,\r\n    \"updated_at\": 1625619647000,\r\n    \"affiliation_id\": {{affiliation_id}},\r\n    \"school_division_department\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/affiliation_attributes?oid=467",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"affiliation_attributes"
									],
									"query": [
										{
											"key": "oid",
											"value": "467"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT/PATCH Affiliation Attributes by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let postAffiliationAttributeSchema = JSON.parse(pm.variables.get(\"postAffiliationAttribute\"))\r",
											"        pm.response.to.have.jsonSchema(postAffiliationAttributeSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 1612,\r\n    \"affiliation_id\": {{affiliation_id}},\r\n    \"school_division_department_id\": 2,\r\n    \"title\": \"Another Title\",\r\n    \"persona\": \"Other\",\r\n    \"seniority\": \"President / VP / Executive Director\",\r\n    \"user_profile_picture_url\": \"https://stage-api.evertrue.com/lids/users/4567/linkedin/avatar\",\r\n    \"user_profile_picture_source\": \"sodas\",\r\n    \"user_profile_picture_last_updated\": \"2021-07-07T01:00:47.000Z\",\r\n    \"nps_score\": 5,\r\n    \"nps_score_date\": \"2021-07-07\",\r\n    \"created_at\": \"2025-08-06T08:55:09.996Z\",\r\n    \"updated_at\": \"2025-08-06T08:55:09.996Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/affiliation_attributes/{{affiliation_attribute_id}}?oid=467",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"affiliation_attributes",
										"{{affiliation_attribute_id}}"
									],
									"query": [
										{
											"key": "oid",
											"value": "467"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Affiliation Attributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/affiliation_attributes/{{affiliation_attribute_id}}?oid=467",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"affiliation_attributes",
										"{{affiliation_attribute_id}}"
									],
									"query": [
										{
											"key": "oid",
											"value": "467"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove a user from an organization / revoke affiliation (admin endpoint) Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/affiliations/{{affiliation_id}}?oid=467",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"affiliations",
										"{{affiliation_id}}"
									],
									"query": [
										{
											"key": "oid",
											"value": "467"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Personas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let getPersonasSchema = JSON.parse(pm.variables.get(\"getPersonas\"))\r",
											"        pm.response.to.have.jsonSchema(getPersonasSchema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/personas?oid=463",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"personas"
									],
									"query": [
										{
											"key": "oid",
											"value": "463"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Seniorities",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let getSenioritiesSchema = JSON.parse(pm.variables.get(\"getSeniorities\"))\r",
											"        pm.response.to.have.jsonSchema(getSenioritiesSchema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/seniorities?oid=463",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"seniorities"
									],
									"query": [
										{
											"key": "oid",
											"value": "463"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Integrations Copy",
					"item": [
						{
							"name": "Auth Prime Token auth_api Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"auth_token\", jsonData.token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "p0o9P)O(p0o9P)O(",
											"type": "string"
										},
										{
											"key": "username",
											"value": "vasyl.babych@evertrue.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueBasicAuth",
										"type": "text"
									},
									{
										"key": "host",
										"value": "stage-api.evertrue.com",
										"type": "text"
									},
									{
										"key": "Device-ID",
										"value": "{{Device-ID}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/session",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"session"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get integration",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{et_host}}/auth/integrations/?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
									"host": [
										"{{et_host}}"
									],
									"path": [
										"auth",
										"integrations",
										""
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										}
									]
								},
								"description": "Get a user object based on its user id"
							},
							"response": [
								{
									"name": "Success - Get a user by id",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{et_host}}/auth/users/1824?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
											"host": [
												"{{et_host}}"
											],
											"path": [
												"auth",
												"users",
												"1824"
											],
											"query": [
												{
													"key": "oid",
													"value": "{{et_oid}}"
												},
												{
													"key": "app_key",
													"value": "{{app_key_givingtree}}"
												},
												{
													"key": "auth",
													"value": "{{auth_token}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 04 Sep 2019 14:04:49 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Status",
											"value": "200 OK"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Request-Id",
											"value": "7ab49a5d-b21f-408a-b20a-4ab3995ba742"
										},
										{
											"key": "X-Runtime",
											"value": "0.044134"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Powered-By",
											"value": "Phusion Passenger 5.0.29"
										},
										{
											"key": "Server",
											"value": "nginx/1.10.1 + Phusion Passenger 5.0.29"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": 1824,\n    \"name\": \"Amy Lashley\",\n    \"email\": \"amy+amytestorg@evertrue.com\",\n    \"super_user\": false,\n    \"super_admin\": false,\n    \"can_delete_orgs\": false,\n    \"unconfirmed_email\": null,\n    \"has_linkedin_identities\": true,\n    \"saml_user_id\": null,\n    \"confirmation_sent_at\": null,\n    \"confirmed_at\": 1551820871000,\n    \"most_recent_session\": null,\n    \"created_at\": 1551820871000,\n    \"updated_at\": 1565807754000,\n    \"changed_at\": 1561058709000,\n    \"affiliations\": [\n        {\n            \"id\": 1711,\n            \"organization_id\": 370,\n            \"remote_user_id\": \"amytestorg\",\n            \"contact_id\": null,\n            \"legacy_user_id\": null,\n            \"created_at\": 1551820871000,\n            \"updated_at\": 1561058709000,\n            \"organization\": {\n                \"id\": 370,\n                \"name\": \"Amy's Test Org\",\n                \"slug\": \"amytestorg\",\n                \"sso_method\": \"disabled\"\n            },\n            \"affiliation_roles\": [\n                {\n                    \"id\": 2938,\n                    \"role_id\": 1092,\n                    \"creator_user_id\": 1741,\n                    \"created_at\": 1551820871000,\n                    \"updated_at\": 1551820871000,\n                    \"role\": {\n                        \"id\": 1092,\n                        \"remote_id\": \"GivingTree Owner\",\n                        \"organization_id\": 370,\n                        \"name\": \"GivingTree Owner\",\n                        \"default\": false,\n                        \"can_see_private_data\": true\n                    }\n                }\n            ]\n        }\n    ],\n    \"affiliation_requests\": [],\n    \"affiliation_attributes\": [\n        {\n            \"id\": 950,\n            \"affiliation_id\": 1711,\n            \"school_division_department_id\": null,\n            \"title\": null,\n            \"persona\": \"Other\",\n            \"seniority\": \"President / VP / Executive Director\",\n            \"user_profile_picture_url\": \"https://stage-api.evertrue.com/lids/users/1824/linkedin/avatar\",\n            \"user_profile_picture_source\": \"sodas\",\n            \"user_profile_picture_last_updated\": 1566423638000,\n            \"created_at\": 1566421579000,\n            \"updated_at\": 1566423638000\n        }\n    ]\n}"
								},
								{
									"name": "Failure - Get a user by id",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{et_host}}/auth/users/18?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
											"host": [
												"{{et_host}}"
											],
											"path": [
												"auth",
												"users",
												"18"
											],
											"query": [
												{
													"key": "oid",
													"value": "{{et_oid}}"
												},
												{
													"key": "app_key",
													"value": "{{app_key_givingtree}}"
												},
												{
													"key": "auth",
													"value": "{{auth_token}}"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 04 Sep 2019 14:05:53 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Status",
											"value": "404 Not Found"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Request-Id",
											"value": "ca1886ce-7624-490a-80d2-00faffefbafc"
										},
										{
											"key": "X-Runtime",
											"value": "0.018806"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Powered-By",
											"value": "Phusion Passenger 5.0.29"
										},
										{
											"key": "Server",
											"value": "nginx/1.10.1 + Phusion Passenger 5.0.29"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"User not found.\"\n}"
								}
							]
						},
						{
							"name": "Get integration by ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{et_host}}/auth/integrations/1?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
									"host": [
										"{{et_host}}"
									],
									"path": [
										"auth",
										"integrations",
										"1"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										}
									]
								},
								"description": "Get a user object based on its user id"
							},
							"response": [
								{
									"name": "Failure - Get a user by id",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{et_host}}/auth/users/18?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
											"host": [
												"{{et_host}}"
											],
											"path": [
												"auth",
												"users",
												"18"
											],
											"query": [
												{
													"key": "oid",
													"value": "{{et_oid}}"
												},
												{
													"key": "app_key",
													"value": "{{app_key_givingtree}}"
												},
												{
													"key": "auth",
													"value": "{{auth_token}}"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 04 Sep 2019 14:05:53 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Status",
											"value": "404 Not Found"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Request-Id",
											"value": "ca1886ce-7624-490a-80d2-00faffefbafc"
										},
										{
											"key": "X-Runtime",
											"value": "0.018806"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Powered-By",
											"value": "Phusion Passenger 5.0.29"
										},
										{
											"key": "Server",
											"value": "nginx/1.10.1 + Phusion Passenger 5.0.29"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"User not found.\"\n}"
								},
								{
									"name": "Success - Get a user by id",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{et_host}}/auth/users/1824?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
											"host": [
												"{{et_host}}"
											],
											"path": [
												"auth",
												"users",
												"1824"
											],
											"query": [
												{
													"key": "oid",
													"value": "{{et_oid}}"
												},
												{
													"key": "app_key",
													"value": "{{app_key_givingtree}}"
												},
												{
													"key": "auth",
													"value": "{{auth_token}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 04 Sep 2019 14:04:49 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Status",
											"value": "200 OK"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Request-Id",
											"value": "7ab49a5d-b21f-408a-b20a-4ab3995ba742"
										},
										{
											"key": "X-Runtime",
											"value": "0.044134"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Powered-By",
											"value": "Phusion Passenger 5.0.29"
										},
										{
											"key": "Server",
											"value": "nginx/1.10.1 + Phusion Passenger 5.0.29"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": 1824,\n    \"name\": \"Amy Lashley\",\n    \"email\": \"amy+amytestorg@evertrue.com\",\n    \"super_user\": false,\n    \"super_admin\": false,\n    \"can_delete_orgs\": false,\n    \"unconfirmed_email\": null,\n    \"has_linkedin_identities\": true,\n    \"saml_user_id\": null,\n    \"confirmation_sent_at\": null,\n    \"confirmed_at\": 1551820871000,\n    \"most_recent_session\": null,\n    \"created_at\": 1551820871000,\n    \"updated_at\": 1565807754000,\n    \"changed_at\": 1561058709000,\n    \"affiliations\": [\n        {\n            \"id\": 1711,\n            \"organization_id\": 370,\n            \"remote_user_id\": \"amytestorg\",\n            \"contact_id\": null,\n            \"legacy_user_id\": null,\n            \"created_at\": 1551820871000,\n            \"updated_at\": 1561058709000,\n            \"organization\": {\n                \"id\": 370,\n                \"name\": \"Amy's Test Org\",\n                \"slug\": \"amytestorg\",\n                \"sso_method\": \"disabled\"\n            },\n            \"affiliation_roles\": [\n                {\n                    \"id\": 2938,\n                    \"role_id\": 1092,\n                    \"creator_user_id\": 1741,\n                    \"created_at\": 1551820871000,\n                    \"updated_at\": 1551820871000,\n                    \"role\": {\n                        \"id\": 1092,\n                        \"remote_id\": \"GivingTree Owner\",\n                        \"organization_id\": 370,\n                        \"name\": \"GivingTree Owner\",\n                        \"default\": false,\n                        \"can_see_private_data\": true\n                    }\n                }\n            ]\n        }\n    ],\n    \"affiliation_requests\": [],\n    \"affiliation_attributes\": [\n        {\n            \"id\": 950,\n            \"affiliation_id\": 1711,\n            \"school_division_department_id\": null,\n            \"title\": null,\n            \"persona\": \"Other\",\n            \"seniority\": \"President / VP / Executive Director\",\n            \"user_profile_picture_url\": \"https://stage-api.evertrue.com/lids/users/1824/linkedin/avatar\",\n            \"user_profile_picture_source\": \"sodas\",\n            \"user_profile_picture_last_updated\": 1566423638000,\n            \"created_at\": 1566421579000,\n            \"updated_at\": 1566423638000\n        }\n    ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "CSV Invites",
					"item": [
						{
							"name": "GET csv_invites",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let csv_inviteGet = JSON.parse(pm.variables.get(\"csv_inviteGET\"))\r",
											"        pm.response.to.have.jsonSchema(csv_inviteGet);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/csv_invites?oid=463",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"csv_invites"
									],
									"query": [
										{
											"key": "oid",
											"value": "463"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST csv_invite",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let csv_inviteSchema = JSON.parse(pm.variables.get(\"csv_invitePOST\"))\r",
											"        pm.response.to.have.jsonSchema(csv_inviteSchema);\r",
											"});\r",
											"\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"pm.environment.set(\"csv_id\", jsonData.csv_invite.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"csv\": \"bmFtZV9pZCxzcG9ydCxmaXJzdCxzZWNvbmQscHJpbWFyeSxwaG9uZSxlbWFpbCxhZGRyZXNzCjEyMywzMjEsMTIzLDMyMSwxMjMsMzIxLDEyMywxMjMK\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/csv_invites?oid=463",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"csv_invites"
									],
									"query": [
										{
											"key": "oid",
											"value": "463"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE csv_invite",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let csv_inviteDelSchema = JSON.parse(pm.variables.get(\"csv_inviteDELETE\"))\r",
											"        pm.response.to.have.jsonSchema(csv_inviteDelSchema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/csv_invites/{{csv_id}}?oid=463",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"csv_invites",
										"{{csv_id}}"
									],
									"query": [
										{
											"key": "oid",
											"value": "463"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "School Division Departments",
					"item": [
						{
							"name": "Auth Prime Token auth_api Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"auth_token\", jsonData.token);\r",
											"\r",
											"pm.environment.set(\"session_prime_token\", jsonData.prime_token);\r",
											"pm.environment.set(\"Device-ID\", jsonData.device_id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "p0o9P)O(p0o9P)O(",
											"type": "string"
										},
										{
											"key": "username",
											"value": "vasyl.babych@evertrue.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueBasicAuth",
										"type": "text"
									},
									{
										"key": "host",
										"value": "stage-api.evertrue.com",
										"type": "text"
									},
									{
										"key": "Device-ID",
										"value": "{{Device-ID}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/session",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"session"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET School Division Departments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schoolDivisionSchema = JSON.parse(pm.variables.get(\"schoolDivision\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(schoolDivisionSchema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/school_division_departments?oid=463",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"school_division_departments"
									],
									"query": [
										{
											"key": "oid",
											"value": "463"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST School Division Department",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"let jsonData = pm.response.json();\r",
											"pm.environment.set(\"schoolDivisionDepartmentId\", jsonData.id);\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schoolDivisionPOSTSchema = JSON.parse(pm.variables.get(\"schoolDivisionPOST\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(schoolDivisionPOSTSchema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"value\": \"Department {{$randomAdjective}} {{$randomAlphaNumeric}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/school_division_departments?oid=463",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"school_division_departments"
									],
									"query": [
										{
											"key": "oid",
											"value": "463"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET School Division Department By ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schoolDivisionIDSchema = JSON.parse(pm.variables.get(\"schoolDivisionID\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(schoolDivisionIDSchema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/school_division_departments/{{schoolDivisionDepartmentId}}?oid=463",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"school_division_departments",
										"{{schoolDivisionDepartmentId}}"
									],
									"query": [
										{
											"key": "oid",
											"value": "463"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT/PATCH School Division Departments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"value\": \"Department {{$randomAdjective}}_patch\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/school_division_departments/{{schoolDivisionDepartmentId}}?oid=463",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"school_division_departments",
										"{{schoolDivisionDepartmentId}}"
									],
									"query": [
										{
											"key": "oid",
											"value": "463"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE School Division Department",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/school_division_departments/{{schoolDivisionDepartmentId}}?oid=463",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"school_division_departments",
										"{{schoolDivisionDepartmentId}}"
									],
									"query": [
										{
											"key": "oid",
											"value": "463"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Applications",
					"item": [
						{
							"name": "Auth Prime Token auth_api Copy 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"auth_token\", jsonData.token);\r",
											"\r",
											"pm.environment.set(\"session_prime_token\", jsonData.prime_token);\r",
											"pm.environment.set(\"Device-ID\", jsonData.device_id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "p0o9P)O(p0o9P)O(",
											"type": "string"
										},
										{
											"key": "username",
											"value": "vasyl.babych@evertrue.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueBasicAuth",
										"type": "text"
									},
									{
										"key": "host",
										"value": "stage-api.evertrue.com",
										"type": "text"
									},
									{
										"key": "Device-ID",
										"value": "{{Device-ID}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/session",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"session"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Auth Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Application-Key",
										"value": "ef571795d45d5be4994a3beebbf2fcb9d24466d45cbf6877250ba822420d3c64"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAppToken"
									},
									{
										"key": "Authorization",
										"value": "ODp2X1NIY1EzY3pNelNKaVAtd3NURA=="
									},
									{
										"key": "ET-Update-Source",
										"value": "csv_importer"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/status?oid=1",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"status"
									],
									"query": [
										{
											"key": "oid",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get list of all Auth applications (super-admin only)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"getApplicationsSchema\"))\r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Application-Key",
										"value": "ef571795d45d5be4994a3beebbf2fcb9d24466d45cbf6877250ba822420d3c64"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAppToken"
									},
									{
										"key": "Authorization",
										"value": "ODp2X1NIY1EzY3pNelNKaVAtd3NURA=="
									},
									{
										"key": "ET-Update-Source",
										"value": "csv_importer"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/applications",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"applications"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Identity Providers",
					"item": [
						{
							"name": "Auth Prime Token auth_api Copy 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"auth_token\", jsonData.token);\r",
											"\r",
											"pm.environment.set(\"session_prime_token\", jsonData.prime_token);\r",
											"pm.environment.set(\"Device-ID\", jsonData.device_id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "p0o9P)O(p0o9P)O(",
											"type": "string"
										},
										{
											"key": "username",
											"value": "vasyl.babych@evertrue.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueBasicAuth",
										"type": "text"
									},
									{
										"key": "host",
										"value": "stage-api.evertrue.com",
										"type": "text"
									},
									{
										"key": "Device-ID",
										"value": "{{Device-ID}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/session",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"session"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an Identity Provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"identity_provider\": {\r\n        \"name\": \"identity-provider-test-{{$randomFirstName}}\",\r\n        \"primary_domain_suffix\": \"example.com\",\r\n        \"federation_xml_url\":\"http://idp.ssocircle.com/\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/identity_providers?oid={{et_oid}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"identity_providers"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Identity Providers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"        pm.test(\"Response matches the expected schema\", function () {\r",
											"           let schema = JSON.parse(pm.variables.get(\"listIdentiyProvidersSchema\"))\r",
											"                \r",
											"               pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"identityProviderId\", jsonData[jsonData.length - 1].id);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/identity_providers",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"identity_providers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Identity Provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"identity_provider\": {\r\n        \"primary_domain_suffix\": \"example1.com\",\r\n        \"federation_xml_url\":\"http://idp.ssocircle.com/\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/identity_providers/{{identityProviderId}}?oid={{et_oid}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"identity_providers",
										"{{identityProviderId}}"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Identity Provider trying rename",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"identity_provider\": {\r\n        \"name\": \"test_renamed\",\r\n        \"primary_domain_suffix\": \"example1.com\",\r\n        \"federation_xml_url\":\"http://idp.ssocircle.com/\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/identity_providers/{{identityProviderId}}?oid={{et_oid}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"identity_providers",
										"{{identityProviderId}}"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Identity Provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"identity_provider\": {\r\n        \"primary_domain_suffix\": \"example1.com\",\r\n        \"federation_xml_url\":\"http://idp.ssocircle.com/\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/identity_providers/{{identityProviderId}}?oid={{et_oid}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"identity_providers",
										"{{identityProviderId}}"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search Identity Provider's Organization by Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"id\":42,\r\n        \"name\":\"Swan\",\r\n        \"slug\":\"swan\",\r\n        \"sso_method\":\"saml\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/identity_providers/search?email=yaroslav.kondria@evertrue.com?oid={{et_oid}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"identity_providers",
										"search"
									],
									"query": [
										{
											"key": "email",
											"value": "yaroslav.kondria@evertrue.com?oid={{et_oid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Show Identity Provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"        pm.test(\"Response matches the expected schema\", function () {\r",
											"           let schema = JSON.parse(pm.variables.get(\"IdentiyProviderSchema\"))\r",
											"                \r",
											"               pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/identity_providers/10",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"identity_providers",
										"10"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Identity Provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"identity_provider\": {\r\n        \"name\": \"identity-provider-test1\",\r\n        \"primary_domain_suffix\": \"example.com\",\r\n        \"federation_xml_url\":\"http://idp.ssocircle.com/\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/identity_providers/{{identityProviderId}}?oid={{et_oid}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"identity_providers",
										"{{identityProviderId}}"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User Identities",
					"item": [
						{
							"name": "Auth Prime Token auth_api Copy 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"auth_token\", jsonData.token);\r",
											"\r",
											"pm.environment.set(\"session_prime_token\", jsonData.prime_token);\r",
											"pm.environment.set(\"Device-ID\", jsonData.device_id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "p0o9P)O(p0o9P)O(",
											"type": "string"
										},
										{
											"key": "username",
											"value": "vasyl.babych@evertrue.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueBasicAuth",
										"type": "text"
									},
									{
										"key": "host",
										"value": "stage-api.evertrue.com",
										"type": "text"
									},
									{
										"key": "Device-ID",
										"value": "{{Device-ID}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/session",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"session"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Identity /identities/unmatched",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"identitiesUnmatchedSchema\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// Note: Must provide app token authorization headers!",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/identities/unmatched",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"identities",
										"unmatched"
									]
								}
							},
							"response": []
						},
						{
							"name": "Identity Lookup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"identitiesKeySchema\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "815e8d01be8f78a41d1c71eb652b8be124b89058b74d284c6bb752a034dbb301",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// Note: Must provide app token authorization headers!",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/identities/linkedin_id?app=3&identity=UpzgxzT1fy",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"identities",
										"linkedin_id"
									],
									"query": [
										{
											"key": "app",
											"value": "3"
										},
										{
											"key": "identity",
											"value": "UpzgxzT1fy"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Give Roles to user via Affiliation",
					"item": [
						{
							"name": "Auth Prime Token auth_api Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"auth_token\", jsonData.token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "p0o9P)O(p0o9P)O(",
											"type": "string"
										},
										{
											"key": "username",
											"value": "vasyl.babych@evertrue.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueBasicAuth",
										"type": "text"
									},
									{
										"key": "host",
										"value": "stage-api.evertrue.com",
										"type": "text"
									},
									{
										"key": "Device-ID",
										"value": "{{Device-ID}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/session",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"session"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Roles",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{et_host}}/auth/roles/?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
									"host": [
										"{{et_host}}"
									],
									"path": [
										"auth",
										"roles",
										""
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										}
									]
								},
								"description": "Get a user object based on its user id"
							},
							"response": [
								{
									"name": "Success - Get a user by id",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{et_host}}/auth/users/1824?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
											"host": [
												"{{et_host}}"
											],
											"path": [
												"auth",
												"users",
												"1824"
											],
											"query": [
												{
													"key": "oid",
													"value": "{{et_oid}}"
												},
												{
													"key": "app_key",
													"value": "{{app_key_givingtree}}"
												},
												{
													"key": "auth",
													"value": "{{auth_token}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 04 Sep 2019 14:04:49 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Status",
											"value": "200 OK"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Request-Id",
											"value": "7ab49a5d-b21f-408a-b20a-4ab3995ba742"
										},
										{
											"key": "X-Runtime",
											"value": "0.044134"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Powered-By",
											"value": "Phusion Passenger 5.0.29"
										},
										{
											"key": "Server",
											"value": "nginx/1.10.1 + Phusion Passenger 5.0.29"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": 1824,\n    \"name\": \"Amy Lashley\",\n    \"email\": \"amy+amytestorg@evertrue.com\",\n    \"super_user\": false,\n    \"super_admin\": false,\n    \"can_delete_orgs\": false,\n    \"unconfirmed_email\": null,\n    \"has_linkedin_identities\": true,\n    \"saml_user_id\": null,\n    \"confirmation_sent_at\": null,\n    \"confirmed_at\": 1551820871000,\n    \"most_recent_session\": null,\n    \"created_at\": 1551820871000,\n    \"updated_at\": 1565807754000,\n    \"changed_at\": 1561058709000,\n    \"affiliations\": [\n        {\n            \"id\": 1711,\n            \"organization_id\": 370,\n            \"remote_user_id\": \"amytestorg\",\n            \"contact_id\": null,\n            \"legacy_user_id\": null,\n            \"created_at\": 1551820871000,\n            \"updated_at\": 1561058709000,\n            \"organization\": {\n                \"id\": 370,\n                \"name\": \"Amy's Test Org\",\n                \"slug\": \"amytestorg\",\n                \"sso_method\": \"disabled\"\n            },\n            \"affiliation_roles\": [\n                {\n                    \"id\": 2938,\n                    \"role_id\": 1092,\n                    \"creator_user_id\": 1741,\n                    \"created_at\": 1551820871000,\n                    \"updated_at\": 1551820871000,\n                    \"role\": {\n                        \"id\": 1092,\n                        \"remote_id\": \"GivingTree Owner\",\n                        \"organization_id\": 370,\n                        \"name\": \"GivingTree Owner\",\n                        \"default\": false,\n                        \"can_see_private_data\": true\n                    }\n                }\n            ]\n        }\n    ],\n    \"affiliation_requests\": [],\n    \"affiliation_attributes\": [\n        {\n            \"id\": 950,\n            \"affiliation_id\": 1711,\n            \"school_division_department_id\": null,\n            \"title\": null,\n            \"persona\": \"Other\",\n            \"seniority\": \"President / VP / Executive Director\",\n            \"user_profile_picture_url\": \"https://stage-api.evertrue.com/lids/users/1824/linkedin/avatar\",\n            \"user_profile_picture_source\": \"sodas\",\n            \"user_profile_picture_last_updated\": 1566423638000,\n            \"created_at\": 1566421579000,\n            \"updated_at\": 1566423638000\n        }\n    ]\n}"
								},
								{
									"name": "Failure - Get a user by id",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{et_host}}/auth/users/18?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
											"host": [
												"{{et_host}}"
											],
											"path": [
												"auth",
												"users",
												"18"
											],
											"query": [
												{
													"key": "oid",
													"value": "{{et_oid}}"
												},
												{
													"key": "app_key",
													"value": "{{app_key_givingtree}}"
												},
												{
													"key": "auth",
													"value": "{{auth_token}}"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 04 Sep 2019 14:05:53 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Status",
											"value": "404 Not Found"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Request-Id",
											"value": "ca1886ce-7624-490a-80d2-00faffefbafc"
										},
										{
											"key": "X-Runtime",
											"value": "0.018806"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Powered-By",
											"value": "Phusion Passenger 5.0.29"
										},
										{
											"key": "Server",
											"value": "nginx/1.10.1 + Phusion Passenger 5.0.29"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"User not found.\"\n}"
								}
							]
						},
						{
							"name": "Get a user's affiliation(s)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{et_host}}/auth/users/2323/affiliations?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
									"host": [
										"{{et_host}}"
									],
									"path": [
										"auth",
										"users",
										"2323",
										"affiliations"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										}
									]
								},
								"description": "Get a user object based on its user id"
							},
							"response": [
								{
									"name": "Success - Get a user by id",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{et_host}}/auth/users/1824?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
											"host": [
												"{{et_host}}"
											],
											"path": [
												"auth",
												"users",
												"1824"
											],
											"query": [
												{
													"key": "oid",
													"value": "{{et_oid}}"
												},
												{
													"key": "app_key",
													"value": "{{app_key_givingtree}}"
												},
												{
													"key": "auth",
													"value": "{{auth_token}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 04 Sep 2019 14:04:49 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Status",
											"value": "200 OK"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Request-Id",
											"value": "7ab49a5d-b21f-408a-b20a-4ab3995ba742"
										},
										{
											"key": "X-Runtime",
											"value": "0.044134"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Powered-By",
											"value": "Phusion Passenger 5.0.29"
										},
										{
											"key": "Server",
											"value": "nginx/1.10.1 + Phusion Passenger 5.0.29"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": 1824,\n    \"name\": \"Amy Lashley\",\n    \"email\": \"amy+amytestorg@evertrue.com\",\n    \"super_user\": false,\n    \"super_admin\": false,\n    \"can_delete_orgs\": false,\n    \"unconfirmed_email\": null,\n    \"has_linkedin_identities\": true,\n    \"saml_user_id\": null,\n    \"confirmation_sent_at\": null,\n    \"confirmed_at\": 1551820871000,\n    \"most_recent_session\": null,\n    \"created_at\": 1551820871000,\n    \"updated_at\": 1565807754000,\n    \"changed_at\": 1561058709000,\n    \"affiliations\": [\n        {\n            \"id\": 1711,\n            \"organization_id\": 370,\n            \"remote_user_id\": \"amytestorg\",\n            \"contact_id\": null,\n            \"legacy_user_id\": null,\n            \"created_at\": 1551820871000,\n            \"updated_at\": 1561058709000,\n            \"organization\": {\n                \"id\": 370,\n                \"name\": \"Amy's Test Org\",\n                \"slug\": \"amytestorg\",\n                \"sso_method\": \"disabled\"\n            },\n            \"affiliation_roles\": [\n                {\n                    \"id\": 2938,\n                    \"role_id\": 1092,\n                    \"creator_user_id\": 1741,\n                    \"created_at\": 1551820871000,\n                    \"updated_at\": 1551820871000,\n                    \"role\": {\n                        \"id\": 1092,\n                        \"remote_id\": \"GivingTree Owner\",\n                        \"organization_id\": 370,\n                        \"name\": \"GivingTree Owner\",\n                        \"default\": false,\n                        \"can_see_private_data\": true\n                    }\n                }\n            ]\n        }\n    ],\n    \"affiliation_requests\": [],\n    \"affiliation_attributes\": [\n        {\n            \"id\": 950,\n            \"affiliation_id\": 1711,\n            \"school_division_department_id\": null,\n            \"title\": null,\n            \"persona\": \"Other\",\n            \"seniority\": \"President / VP / Executive Director\",\n            \"user_profile_picture_url\": \"https://stage-api.evertrue.com/lids/users/1824/linkedin/avatar\",\n            \"user_profile_picture_source\": \"sodas\",\n            \"user_profile_picture_last_updated\": 1566423638000,\n            \"created_at\": 1566421579000,\n            \"updated_at\": 1566423638000\n        }\n    ]\n}"
								},
								{
									"name": "Failure - Get a user by id",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{et_host}}/auth/users/18?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
											"host": [
												"{{et_host}}"
											],
											"path": [
												"auth",
												"users",
												"18"
											],
											"query": [
												{
													"key": "oid",
													"value": "{{et_oid}}"
												},
												{
													"key": "app_key",
													"value": "{{app_key_givingtree}}"
												},
												{
													"key": "auth",
													"value": "{{auth_token}}"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 04 Sep 2019 14:05:53 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Status",
											"value": "404 Not Found"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Request-Id",
											"value": "ca1886ce-7624-490a-80d2-00faffefbafc"
										},
										{
											"key": "X-Runtime",
											"value": "0.018806"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Powered-By",
											"value": "Phusion Passenger 5.0.29"
										},
										{
											"key": "Server",
											"value": "nginx/1.10.1 + Phusion Passenger 5.0.29"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"User not found.\"\n}"
								}
							]
						},
						{
							"name": "Create a new affiliation",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"user_id\": 2323,\r\n  \"role_ids\": [1621],\r\n  \"contact_id\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{et_host}}/auth/affiliations?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
									"host": [
										"{{et_host}}"
									],
									"path": [
										"auth",
										"affiliations"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										}
									]
								},
								"description": "Get a user object based on its user id"
							},
							"response": [
								{
									"name": "Success - Get a user by id",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{et_host}}/auth/users/1824?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
											"host": [
												"{{et_host}}"
											],
											"path": [
												"auth",
												"users",
												"1824"
											],
											"query": [
												{
													"key": "oid",
													"value": "{{et_oid}}"
												},
												{
													"key": "app_key",
													"value": "{{app_key_givingtree}}"
												},
												{
													"key": "auth",
													"value": "{{auth_token}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 04 Sep 2019 14:04:49 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Status",
											"value": "200 OK"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Request-Id",
											"value": "7ab49a5d-b21f-408a-b20a-4ab3995ba742"
										},
										{
											"key": "X-Runtime",
											"value": "0.044134"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Powered-By",
											"value": "Phusion Passenger 5.0.29"
										},
										{
											"key": "Server",
											"value": "nginx/1.10.1 + Phusion Passenger 5.0.29"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": 1824,\n    \"name\": \"Amy Lashley\",\n    \"email\": \"amy+amytestorg@evertrue.com\",\n    \"super_user\": false,\n    \"super_admin\": false,\n    \"can_delete_orgs\": false,\n    \"unconfirmed_email\": null,\n    \"has_linkedin_identities\": true,\n    \"saml_user_id\": null,\n    \"confirmation_sent_at\": null,\n    \"confirmed_at\": 1551820871000,\n    \"most_recent_session\": null,\n    \"created_at\": 1551820871000,\n    \"updated_at\": 1565807754000,\n    \"changed_at\": 1561058709000,\n    \"affiliations\": [\n        {\n            \"id\": 1711,\n            \"organization_id\": 370,\n            \"remote_user_id\": \"amytestorg\",\n            \"contact_id\": null,\n            \"legacy_user_id\": null,\n            \"created_at\": 1551820871000,\n            \"updated_at\": 1561058709000,\n            \"organization\": {\n                \"id\": 370,\n                \"name\": \"Amy's Test Org\",\n                \"slug\": \"amytestorg\",\n                \"sso_method\": \"disabled\"\n            },\n            \"affiliation_roles\": [\n                {\n                    \"id\": 2938,\n                    \"role_id\": 1092,\n                    \"creator_user_id\": 1741,\n                    \"created_at\": 1551820871000,\n                    \"updated_at\": 1551820871000,\n                    \"role\": {\n                        \"id\": 1092,\n                        \"remote_id\": \"GivingTree Owner\",\n                        \"organization_id\": 370,\n                        \"name\": \"GivingTree Owner\",\n                        \"default\": false,\n                        \"can_see_private_data\": true\n                    }\n                }\n            ]\n        }\n    ],\n    \"affiliation_requests\": [],\n    \"affiliation_attributes\": [\n        {\n            \"id\": 950,\n            \"affiliation_id\": 1711,\n            \"school_division_department_id\": null,\n            \"title\": null,\n            \"persona\": \"Other\",\n            \"seniority\": \"President / VP / Executive Director\",\n            \"user_profile_picture_url\": \"https://stage-api.evertrue.com/lids/users/1824/linkedin/avatar\",\n            \"user_profile_picture_source\": \"sodas\",\n            \"user_profile_picture_last_updated\": 1566423638000,\n            \"created_at\": 1566421579000,\n            \"updated_at\": 1566423638000\n        }\n    ]\n}"
								},
								{
									"name": "Failure - Get a user by id",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{et_host}}/auth/users/18?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
											"host": [
												"{{et_host}}"
											],
											"path": [
												"auth",
												"users",
												"18"
											],
											"query": [
												{
													"key": "oid",
													"value": "{{et_oid}}"
												},
												{
													"key": "app_key",
													"value": "{{app_key_givingtree}}"
												},
												{
													"key": "auth",
													"value": "{{auth_token}}"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 04 Sep 2019 14:05:53 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Status",
											"value": "404 Not Found"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Request-Id",
											"value": "ca1886ce-7624-490a-80d2-00faffefbafc"
										},
										{
											"key": "X-Runtime",
											"value": "0.018806"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Powered-By",
											"value": "Phusion Passenger 5.0.29"
										},
										{
											"key": "Server",
											"value": "nginx/1.10.1 + Phusion Passenger 5.0.29"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"User not found.\"\n}"
								}
							]
						},
						{
							"name": "Overwrite all of a user's affiliation roles",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"role_ids\": [1621, 1619]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{et_host}}/auth/affiliations/2334?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
									"host": [
										"{{et_host}}"
									],
									"path": [
										"auth",
										"affiliations",
										"2334"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										}
									]
								},
								"description": "Get a user object based on its user id"
							},
							"response": [
								{
									"name": "Success - Get a user by id",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{et_host}}/auth/users/1824?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
											"host": [
												"{{et_host}}"
											],
											"path": [
												"auth",
												"users",
												"1824"
											],
											"query": [
												{
													"key": "oid",
													"value": "{{et_oid}}"
												},
												{
													"key": "app_key",
													"value": "{{app_key_givingtree}}"
												},
												{
													"key": "auth",
													"value": "{{auth_token}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 04 Sep 2019 14:04:49 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Status",
											"value": "200 OK"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Request-Id",
											"value": "7ab49a5d-b21f-408a-b20a-4ab3995ba742"
										},
										{
											"key": "X-Runtime",
											"value": "0.044134"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Powered-By",
											"value": "Phusion Passenger 5.0.29"
										},
										{
											"key": "Server",
											"value": "nginx/1.10.1 + Phusion Passenger 5.0.29"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": 1824,\n    \"name\": \"Amy Lashley\",\n    \"email\": \"amy+amytestorg@evertrue.com\",\n    \"super_user\": false,\n    \"super_admin\": false,\n    \"can_delete_orgs\": false,\n    \"unconfirmed_email\": null,\n    \"has_linkedin_identities\": true,\n    \"saml_user_id\": null,\n    \"confirmation_sent_at\": null,\n    \"confirmed_at\": 1551820871000,\n    \"most_recent_session\": null,\n    \"created_at\": 1551820871000,\n    \"updated_at\": 1565807754000,\n    \"changed_at\": 1561058709000,\n    \"affiliations\": [\n        {\n            \"id\": 1711,\n            \"organization_id\": 370,\n            \"remote_user_id\": \"amytestorg\",\n            \"contact_id\": null,\n            \"legacy_user_id\": null,\n            \"created_at\": 1551820871000,\n            \"updated_at\": 1561058709000,\n            \"organization\": {\n                \"id\": 370,\n                \"name\": \"Amy's Test Org\",\n                \"slug\": \"amytestorg\",\n                \"sso_method\": \"disabled\"\n            },\n            \"affiliation_roles\": [\n                {\n                    \"id\": 2938,\n                    \"role_id\": 1092,\n                    \"creator_user_id\": 1741,\n                    \"created_at\": 1551820871000,\n                    \"updated_at\": 1551820871000,\n                    \"role\": {\n                        \"id\": 1092,\n                        \"remote_id\": \"GivingTree Owner\",\n                        \"organization_id\": 370,\n                        \"name\": \"GivingTree Owner\",\n                        \"default\": false,\n                        \"can_see_private_data\": true\n                    }\n                }\n            ]\n        }\n    ],\n    \"affiliation_requests\": [],\n    \"affiliation_attributes\": [\n        {\n            \"id\": 950,\n            \"affiliation_id\": 1711,\n            \"school_division_department_id\": null,\n            \"title\": null,\n            \"persona\": \"Other\",\n            \"seniority\": \"President / VP / Executive Director\",\n            \"user_profile_picture_url\": \"https://stage-api.evertrue.com/lids/users/1824/linkedin/avatar\",\n            \"user_profile_picture_source\": \"sodas\",\n            \"user_profile_picture_last_updated\": 1566423638000,\n            \"created_at\": 1566421579000,\n            \"updated_at\": 1566423638000\n        }\n    ]\n}"
								},
								{
									"name": "Failure - Get a user by id",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{et_host}}/auth/users/18?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
											"host": [
												"{{et_host}}"
											],
											"path": [
												"auth",
												"users",
												"18"
											],
											"query": [
												{
													"key": "oid",
													"value": "{{et_oid}}"
												},
												{
													"key": "app_key",
													"value": "{{app_key_givingtree}}"
												},
												{
													"key": "auth",
													"value": "{{auth_token}}"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 04 Sep 2019 14:05:53 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Status",
											"value": "404 Not Found"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Request-Id",
											"value": "ca1886ce-7624-490a-80d2-00faffefbafc"
										},
										{
											"key": "X-Runtime",
											"value": "0.018806"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Powered-By",
											"value": "Phusion Passenger 5.0.29"
										},
										{
											"key": "Server",
											"value": "nginx/1.10.1 + Phusion Passenger 5.0.29"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										}
									],
									"cookie": [],
									"body": "{\n    \"message\": \"User not found.\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "ET-29960,   ET-29962",
					"item": [
						{
							"name": "Create affiliation invitation SWAN email Copy",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"vasyl +3\",\n    \"email\": \"vasyl.babych+3@swanteams.com\",\n    \"contact_id\": null,\n    \"app\": \"givingtree\",\n    \"role_ids\": [\n        1616\n    ]\n}"
								},
								"url": {
									"raw": "{{et_host}}/auth/affiliation_invitations?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
									"host": [
										"{{et_host}}"
									],
									"path": [
										"auth",
										"affiliation_invitations"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										}
									]
								},
								"description": "Invite a user to the volunteer app. "
							},
							"response": [
								{
									"name": "Success - Create affiliation invitation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json; charset=UTF-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Lori Smith\",\n    \"email\": \"amyblueet+lorismith@gmail.com\",\n    \"contact_id\": 4719404,\n    \"app\": \"volunteers\",\n    \"role_ids\": [\n        1095\n    ]\n}"
										},
										"url": {
											"raw": "{{et_host}}/auth/affiliation_invitations?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
											"host": [
												"{{et_host}}"
											],
											"path": [
												"auth",
												"affiliation_invitations"
											],
											"query": [
												{
													"key": "oid",
													"value": "{{et_oid}}"
												},
												{
													"key": "app_key",
													"value": "{{app_key_givingtree}}"
												},
												{
													"key": "auth",
													"value": "{{auth_token}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 04 Sep 2019 13:56:49 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Status",
											"value": "200 OK"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Request-Id",
											"value": "916ae634-32cb-42aa-aa3a-e898ddcaf28c"
										},
										{
											"key": "X-Runtime",
											"value": "0.297133"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Powered-By",
											"value": "Phusion Passenger 5.0.29"
										},
										{
											"key": "Server",
											"value": "nginx/1.10.1 + Phusion Passenger 5.0.29"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": 1732,\n    \"invited_by\": 1741,\n    \"email\": \"amyblueet+lorismith@gmail.com\",\n    \"name\": \"Lori Smith\",\n    \"contact_id\": 4719404,\n    \"role_ids\": [\n        \"1095\"\n    ],\n    \"affiliation_id\": null,\n    \"application_name\": \"volunteers\",\n    \"saml_user_id\": null,\n    \"created_at\": 1567605409668,\n    \"updated_at\": 1567605409668,\n    \"accepted_at\": null,\n    \"invite_email_sent_at\": null\n}"
								}
							]
						},
						{
							"name": "Auth Giventree not super",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"auth_token\", jsonData.token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "p0o9P)O(",
											"type": "string"
										},
										{
											"key": "username",
											"value": "vasyl.babych+3@swanteams.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueBasicAuth",
										"type": "text"
									},
									{
										"key": "host",
										"value": "stage-api.evertrue.com",
										"type": "text"
									},
									{
										"key": "Device-ID",
										"value": "{{Device-ID}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/session",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"session"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User id affiliation_attributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/users/2324/affiliation_attributes?oid={{et_oid}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"users",
										"2324",
										"affiliation_attributes"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Affiliation Attributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"createAffiliationAttributes\"))\r",
											"        \r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"Another Title\",\r\n    \"persona\": \"Other\",\r\n    \"seniority\": \"President / VP / Executive Director\",\r\n    \"user_profile_picture_url\": \"https://stage-api.evertrue.com/lids/users/4567/linkedin/avatar\",\r\n    \"user_profile_picture_source\": \"sodas\",\r\n    \"user_profile_picture_last_updated\": \"2021-07-07T01:00:47.000Z\",\r\n    \"nps_score\": 5,\r\n    \"nps_score_date\": \"2021-07-07T01:00:47.000Z\",\r\n    \"created_at\": 1566421553000,\r\n    \"updated_at\": 1625619647000,\r\n    \"affiliation_id\": {{affiliation_id}},\r\n    \"affiliation\":\r\n    {\r\n        \"affiliation_id\": {{affiliation_id}}\r\n    },\r\n    \"school_division_department\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/affiliation_attributes?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}&role=1619",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"affiliation_attributes"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										},
										{
											"key": "role",
											"value": "1619"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "update user check bug 29962",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"super_user\": true,\r\n    \"super_admin\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/users/2323",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"users",
										"2323"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User Registration",
					"item": [
						{
							"name": "Auth Prime Token auth_api Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"auth_token\", jsonData.token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "p0o9P)O(p0o9P)O(",
											"type": "string"
										},
										{
											"key": "username",
											"value": "vasyl.babych@evertrue.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueBasicAuth",
										"type": "text"
									},
									{
										"key": "host",
										"value": "stage-api.evertrue.com",
										"type": "text"
									},
									{
										"key": "Device-ID",
										"value": "{{Device-ID}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/session",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"session"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create affiliation invitation SWAN email Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    const schema = JSON.parse(pm.variables.get(\"affilliationInvitationSchema\"))\r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"email_address\", jsonData.email);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"vasyl {{$randomLastName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"contact_id\": null,\n    \"app\": \"givingtree\",\n    \"role_ids\": [\n        1616\n    ]\n}"
								},
								"url": {
									"raw": "{{et_host}}/auth/affiliation_invitations?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
									"host": [
										"{{et_host}}"
									],
									"path": [
										"auth",
										"affiliation_invitations"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										}
									]
								},
								"description": "Invite a user to the volunteer app. "
							},
							"response": [
								{
									"name": "Success - Create affiliation invitation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json; charset=UTF-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Lori Smith\",\n    \"email\": \"amyblueet+lorismith@gmail.com\",\n    \"contact_id\": 4719404,\n    \"app\": \"volunteers\",\n    \"role_ids\": [\n        1095\n    ]\n}"
										},
										"url": {
											"raw": "{{et_host}}/auth/affiliation_invitations?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
											"host": [
												"{{et_host}}"
											],
											"path": [
												"auth",
												"affiliation_invitations"
											],
											"query": [
												{
													"key": "oid",
													"value": "{{et_oid}}"
												},
												{
													"key": "app_key",
													"value": "{{app_key_givingtree}}"
												},
												{
													"key": "auth",
													"value": "{{auth_token}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 04 Sep 2019 13:56:49 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Status",
											"value": "200 OK"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Request-Id",
											"value": "916ae634-32cb-42aa-aa3a-e898ddcaf28c"
										},
										{
											"key": "X-Runtime",
											"value": "0.297133"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Powered-By",
											"value": "Phusion Passenger 5.0.29"
										},
										{
											"key": "Server",
											"value": "nginx/1.10.1 + Phusion Passenger 5.0.29"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": 1732,\n    \"invited_by\": 1741,\n    \"email\": \"amyblueet+lorismith@gmail.com\",\n    \"name\": \"Lori Smith\",\n    \"contact_id\": 4719404,\n    \"role_ids\": [\n        \"1095\"\n    ],\n    \"affiliation_id\": null,\n    \"application_name\": \"volunteers\",\n    \"saml_user_id\": null,\n    \"created_at\": 1567605409668,\n    \"updated_at\": 1567605409668,\n    \"accepted_at\": null,\n    \"invite_email_sent_at\": null\n}"
								}
							]
						},
						{
							"name": "Receive confirm code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"confirmation_token\", jsonData.confirmation_token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{newEmailAppKey}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "x-api-key",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{et_host}}/auth/internal_testing/user_data?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}&email={{email_address}}",
									"host": [
										"{{et_host}}"
									],
									"path": [
										"auth",
										"internal_testing",
										"user_data"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										},
										{
											"key": "email",
											"value": "{{email_address}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Request Confirmation Instructions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    const schema = JSON.parse(pm.variables.get(\"receiveConfirmationSchema\"))\r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user\": {\n        \"email\": \"{{email_address}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{et_host}}/auth/registrations/confirmation?oid={{et_oid}}&app_key={{app_key_givingtree}}",
									"host": [
										"{{et_host}}"
									],
									"path": [
										"auth",
										"registrations",
										"confirmation"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										}
									]
								},
								"description": "Invite a user to the volunteer app. "
							},
							"response": [
								{
									"name": "Success - Create affiliation invitation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json; charset=UTF-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Lori Smith\",\n    \"email\": \"amyblueet+lorismith@gmail.com\",\n    \"contact_id\": 4719404,\n    \"app\": \"volunteers\",\n    \"role_ids\": [\n        1095\n    ]\n}"
										},
										"url": {
											"raw": "{{et_host}}/auth/affiliation_invitations?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
											"host": [
												"{{et_host}}"
											],
											"path": [
												"auth",
												"affiliation_invitations"
											],
											"query": [
												{
													"key": "oid",
													"value": "{{et_oid}}"
												},
												{
													"key": "app_key",
													"value": "{{app_key_givingtree}}"
												},
												{
													"key": "auth",
													"value": "{{auth_token}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 04 Sep 2019 13:56:49 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Status",
											"value": "200 OK"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Request-Id",
											"value": "916ae634-32cb-42aa-aa3a-e898ddcaf28c"
										},
										{
											"key": "X-Runtime",
											"value": "0.297133"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Powered-By",
											"value": "Phusion Passenger 5.0.29"
										},
										{
											"key": "Server",
											"value": "nginx/1.10.1 + Phusion Passenger 5.0.29"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": 1732,\n    \"invited_by\": 1741,\n    \"email\": \"amyblueet+lorismith@gmail.com\",\n    \"name\": \"Lori Smith\",\n    \"contact_id\": 4719404,\n    \"role_ids\": [\n        \"1095\"\n    ],\n    \"affiliation_id\": null,\n    \"application_name\": \"volunteers\",\n    \"saml_user_id\": null,\n    \"created_at\": 1567605409668,\n    \"updated_at\": 1567605409668,\n    \"accepted_at\": null,\n    \"invite_email_sent_at\": null\n}"
								}
							]
						},
						{
							"name": "User Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"registeredUserId\", jsonData.user.id);\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    const schema = JSON.parse(pm.variables.get(\"registerUserSchema\"))\r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Device-ID",
										"value": "{{Device-ID}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user\": {\n        \"email\": \"{{email_address}}\",\n        \"name\": \"test {{$randomLastName}}\",\n        \"password\": \"12341234\",\n        \"password_confirmation\": \"12341234\",\n        \"invite_token\": \"{{confirmation_token}}\"\n    }\n}"
								},
								"url": {
									"raw": "{{et_host}}/skiff/register?app_key=815e8d01be8f78a41d1c71eb652b8be124b89058b74d284c6bb752a034dbb301&oid={{et_oid}}",
									"host": [
										"{{et_host}}"
									],
									"path": [
										"skiff",
										"register"
									],
									"query": [
										{
											"key": "app_key",
											"value": "815e8d01be8f78a41d1c71eb652b8be124b89058b74d284c6bb752a034dbb301"
										},
										{
											"key": "oid",
											"value": "{{et_oid}}"
										}
									]
								},
								"description": "Invite a user to the volunteer app. "
							},
							"response": [
								{
									"name": "Success - Create affiliation invitation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json; charset=UTF-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Lori Smith\",\n    \"email\": \"amyblueet+lorismith@gmail.com\",\n    \"contact_id\": 4719404,\n    \"app\": \"volunteers\",\n    \"role_ids\": [\n        1095\n    ]\n}"
										},
										"url": {
											"raw": "{{et_host}}/auth/affiliation_invitations?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
											"host": [
												"{{et_host}}"
											],
											"path": [
												"auth",
												"affiliation_invitations"
											],
											"query": [
												{
													"key": "oid",
													"value": "{{et_oid}}"
												},
												{
													"key": "app_key",
													"value": "{{app_key_givingtree}}"
												},
												{
													"key": "auth",
													"value": "{{auth_token}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 04 Sep 2019 13:56:49 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Status",
											"value": "200 OK"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-Request-Id",
											"value": "916ae634-32cb-42aa-aa3a-e898ddcaf28c"
										},
										{
											"key": "X-Runtime",
											"value": "0.297133"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Powered-By",
											"value": "Phusion Passenger 5.0.29"
										},
										{
											"key": "Server",
											"value": "nginx/1.10.1 + Phusion Passenger 5.0.29"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": 1732,\n    \"invited_by\": 1741,\n    \"email\": \"amyblueet+lorismith@gmail.com\",\n    \"name\": \"Lori Smith\",\n    \"contact_id\": 4719404,\n    \"role_ids\": [\n        \"1095\"\n    ],\n    \"affiliation_id\": null,\n    \"application_name\": \"volunteers\",\n    \"saml_user_id\": null,\n    \"created_at\": 1567605409668,\n    \"updated_at\": 1567605409668,\n    \"accepted_at\": null,\n    \"invite_email_sent_at\": null\n}"
								}
							]
						},
						{
							"name": "Auth Login via registered user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"auth_token\", jsonData.token);\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "12341234",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{email_address}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueBasicAuth",
										"type": "text"
									},
									{
										"key": "host",
										"value": "stage-api.evertrue.com",
										"type": "text"
									},
									{
										"key": "Device-ID",
										"value": "{{Device-ID}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/session",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"session"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Auth Prime Token auth_api Copy 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"auth_token\", jsonData.token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "p0o9P)O(p0o9P)O(",
											"type": "string"
										},
										{
											"key": "username",
											"value": "vasyl.babych@evertrue.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueBasicAuth",
										"type": "text"
									},
									{
										"key": "host",
										"value": "stage-api.evertrue.com",
										"type": "text"
									},
									{
										"key": "Device-ID",
										"value": "{{Device-ID}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/session",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"session"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a user (super-admin endpoint) Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"affiliations\": [\r\n        {\r\n            \"organization_id\": 463,\r\n            \"contact_id\": null,\r\n            \"role_ids\": [\r\n                1619\r\n            ]\r\n        }\r\n    ],\r\n    \"email\": \"{{$randomFirstName}}{{$randomAlphaNumeric}}@evertrue.com\",\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"super_user\": false,\r\n    \"email_locked\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/users/{{registeredUserId}}?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"users",
										"{{registeredUserId}}"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User Password Reset",
					"item": [
						{
							"name": "Request Password Reset Instructions (forgot password)",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user\": {\n        \"email\": \"yaroslavkondria@gmail.com\"\n    }\n}"
								},
								"url": {
									"raw": "{{et_host}}/auth/registrations/password?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
									"host": [
										"{{et_host}}"
									],
									"path": [
										"auth",
										"registrations",
										"password"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										}
									]
								},
								"description": "Invite a user to the volunteer app. "
							},
							"response": []
						},
						{
							"name": "Password Reset",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user\": {\n        \"email\": \"yaroslavkondria@gmail.com\"\n    }\n}"
								},
								"url": {
									"raw": "{{et_host}}/auth/registrations/password?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
									"host": [
										"{{et_host}}"
									],
									"path": [
										"auth",
										"registrations",
										"password"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										}
									]
								},
								"description": "Invite a user to the volunteer app. "
							},
							"response": []
						}
					]
				},
				{
					"name": "Password Policy",
					"item": [
						{
							"name": "GET Password Policy",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{et_host}}/auth/registrations/password/policy?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
									"host": [
										"{{et_host}}"
									],
									"path": [
										"auth",
										"registrations",
										"password",
										"policy"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										}
									]
								},
								"description": "Invite a user to the volunteer app. "
							},
							"response": []
						},
						{
							"name": "GET Password Policy Copy",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{et_host}}/auth/registrations/password/policy?oid={{et_oid}}&app_key={{app_key_givingtree}}&auth={{auth_token}}",
									"host": [
										"{{et_host}}"
									],
									"path": [
										"auth",
										"registrations",
										"password",
										"policy"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										}
									]
								},
								"description": "Invite a user to the volunteer app. "
							},
							"response": []
						}
					]
				},
				{
					"name": "User Account Update",
					"item": [
						{
							"name": "Change Email Address, Name, and/or Password",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Yaroslav new user name\",\r\n    \"email\": \"yaroslavkondria@gmail.com\",\r\n    \"password\": \"MyNewPassword1!\"\r\n}"
								},
								"url": {
									"raw": "{{et_host}}/auth/registrations?oid={{et_oid}}&app_key=815e8d01be8f78a41d1c71eb652b8be124b89058b74d284c6bb752a034dbb301&auth={{auth_token}}",
									"host": [
										"{{et_host}}"
									],
									"path": [
										"auth",
										"registrations"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "815e8d01be8f78a41d1c71eb652b8be124b89058b74d284c6bb752a034dbb301"
										},
										{
											"key": "auth",
											"value": "{{auth_token}}"
										}
									]
								},
								"description": "Invite a user to the volunteer app. "
							},
							"response": []
						}
					]
				},
				{
					"name": "User Confirmation",
					"item": [
						{
							"name": "Request Confirmation Instructions",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": {\r\n        \"email\": \"yaroslavkondria@gmail.com\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{et_host}}/auth/registrations/confirmation?oid={{et_oid}}&app_key={{app_key_givingtree}}",
									"host": [
										"{{et_host}}"
									],
									"path": [
										"auth",
										"registrations",
										"confirmation"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										}
									]
								},
								"description": "Invite a user to the volunteer app. "
							},
							"response": []
						}
					]
				},
				{
					"name": "ET-30556 Get organizations",
					"item": [
						{
							"name": "Auth Prime Token auth_api Copy 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"auth_token\", jsonData.token);\r",
											"\r",
											"pm.environment.set(\"session_prime_token\", jsonData.prime_token);\r",
											"pm.environment.set(\"Device-ID\", jsonData.device_id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "p0o9P)O(p0o9P)O(",
											"type": "string"
										},
										{
											"key": "username",
											"value": "vasyl.babych@evertrue.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueBasicAuth",
										"type": "text"
									},
									{
										"key": "host",
										"value": "stage-api.evertrue.com",
										"type": "text"
									},
									{
										"key": "Device-ID",
										"value": "{{Device-ID}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/session",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"session"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create an Identity Provider Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"identity_provider\": {\r\n        \"name\": \"identity-provider-test-{{$randomFirstName}}\",\r\n        \"primary_domain_suffix\": \"example.com\",\r\n        \"federation_xml_url\":\"http://idp.ssocircle.com/\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/identity_providers?oid={{et_oid}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"identity_providers"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List Identity Providers Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"        pm.test(\"Response matches the expected schema\", function () {\r",
											"           let schema = JSON.parse(pm.variables.get(\"listIdentiyProvidersSchema\"))\r",
											"                \r",
											"               pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"identityProviderId\", jsonData[jsonData.length - 1].id);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/identity_providers",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"identity_providers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Auth Prime Token auth_api Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"auth_token\", jsonData.token);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "p0o9P)O(p0o9P)O(",
											"type": "string"
										},
										{
											"key": "username",
											"value": "vasyl.babych@evertrue.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "590b6855ec417400015682e454c6acec8f371adf861b830b031fa9ad3ac84c90",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueBasicAuth",
										"type": "text"
									},
									{
										"key": "host",
										"value": "stage-api.evertrue.com",
										"type": "text"
									},
									{
										"key": "Device-ID",
										"value": "{{Device-ID}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/session",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"session"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get an organization by ID Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var responseJSON = pm.response.json();\r",
											"\r",
											"// Test to verify that the cognito_logout_url contains the word 'community'\r",
											"pm.test(\"Cognito logout URL contains 'community'\", function () {\r",
											"    pm.expect(responseJSON.identity_provider.cognito_logout_url).to.include('evertrue.com/community');\r",
											"});\r",
											"\r",
											"pm.test(\"oauth2_authorize_url logout URL contains 'community'\", function () {\r",
											"    pm.expect(responseJSON.identity_provider.oauth2_authorize_url).to.include('evertrue.com/community');\r",
											"});\r",
											"\r",
											"pm.test(\"redirect_uri logout URL contains 'community'\", function () {\r",
											"    pm.expect(responseJSON.identity_provider.token_data.redirect_uri).to.include('evertrue.com/community');\r",
											"});\r",
											"\r",
											"pm.test(\"SSO should have saml\", function () {\r",
											"    pm.expect(responseJSON.sso_method).to.include('saml');\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "590b6855ec417400015682e454c6acec8f371adf861b830b031fa9ad3ac84c90",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/organizations/463",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"organizations",
										"463"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Identity Provider Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"identity_provider\": {\r\n        \"name\": \"identity-provider-test1\",\r\n        \"primary_domain_suffix\": \"example.com\",\r\n        \"federation_xml_url\":\"http://idp.ssocircle.com/\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/identity_providers/{{identityProviderId}}?oid={{et_oid}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"identity_providers",
										"{{identityProviderId}}"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Integrations",
					"item": [
						{
							"name": "Auth Prime Token auth_api Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"auth_token\", jsonData.token);\r",
											"\r",
											"pm.environment.set(\"session_prime_token\", jsonData.prime_token);\r",
											"pm.environment.set(\"Device-ID\", jsonData.device_id);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "p0o9P)O(p0o9P)O(",
											"type": "string"
										},
										{
											"key": "username",
											"value": "vasyl.babych@evertrue.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "{{auth_api}}",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueBasicAuth",
										"type": "text"
									},
									{
										"key": "host",
										"value": "stage-api.evertrue.com",
										"type": "text"
									},
									{
										"key": "Device-ID",
										"value": "{{Device-ID}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/session",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"session"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Integration Settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"getIntegrationSettingsSchema\"))\r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/integrations/settings",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"integrations",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Integrations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let getIntegration = JSON.parse(pm.variables.get(\"getIntegrationSchema\"))\r",
											"        pm.response.to.have.jsonSchema(getIntegration);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/integrations?oid=158",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"integrations"
									],
									"query": [
										{
											"key": "oid",
											"value": "158"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Integration by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let getIntegrationId = JSON.parse(pm.variables.get(\"getIntegrationIdSchema\"))\r",
											"        pm.response.to.have.jsonSchema(getIntegrationId);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/integrations/2?oid=158",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"integrations",
										"2"
									],
									"query": [
										{
											"key": "oid",
											"value": "158"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Integration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"postIntegrationIdSchema\"))\r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"integrationId\", jsonData.id);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"integration\": {\r\n        \"platform\": \"blackbaud_renxt\",\r\n        \"account_id\": null,\r\n        \"authentication\": {\r\n            \"refresh_token\": \"6ae00b3a66924d9a9d6e1a8215eb0735\",\r\n            \"refresh_token_expires_on\": 1665683391000,\r\n            \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IjREVjZz\",\r\n            \"access_token_expires_on\": 1634150990000,\r\n            \"user_id\": \"cf973078-367c-427d-8795-58021bcca28a\",\r\n            \"email\": \"vasyl.babych@evertrue.com\"\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/integrations?oid=463",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"integrations"
									],
									"query": [
										{
											"key": "integration",
											"value": "Zoom test",
											"disabled": true
										},
										{
											"key": "oid",
											"value": "463"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Identity Lookup Blackbaud",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let getIntegrationId = JSON.parse(pm.variables.get(\"getIntegrationIdBlackbaudSchema\"))\r",
											"        pm.response.to.have.jsonSchema(getIntegrationId);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// Note: Must provide app token authorization headers!",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/integrations/blackbaud/renxt?oid=463",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"integrations",
										"blackbaud",
										"renxt"
									],
									"query": [
										{
											"key": "oid",
											"value": "463"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Identity Lookup Blackbaud Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "// Note: Must provide app token authorization headers!",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/integrations/{{integrationId}}?oid=463",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"integrations",
										"{{integrationId}}"
									],
									"query": [
										{
											"key": "oid",
											"value": "463"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Link Tokens",
					"item": [
						{
							"name": "Auth Prime Token auth_api",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"auth_token\", jsonData.token);\r",
											"\r",
											"pm.environment.set(\"session_prime_token\", jsonData.prime_token);\r",
											"pm.environment.set(\"Device-ID\", jsonData.device_id);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "p0o9P)O(p0o9P)O(",
											"type": "string"
										},
										{
											"key": "username",
											"value": "vasyl.babych@evertrue.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "7cb9b8d4451567b725e81b998cdf46cfc58426f9936916c714acddbc9f082546",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueBasicAuth",
										"type": "text"
									},
									{
										"key": "host",
										"value": "stage-api.evertrue.com",
										"type": "text"
									},
									{
										"key": "Device-ID",
										"value": "{{Device-ID}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/session",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"session"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a Link Token (application endpoint)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "Application-Key",
										"value": "7cb9b8d4451567b725e81b998cdf46cfc58426f9936916c714acddbc9f082546",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"application\": \"volunteers\",\r\n    \"user_id\": 2324\r\n}"
								},
								"url": {
									"raw": "{{et_host}}/auth/link_tokens/create?oid={{et_oid}}&app_key={{app_key_givingtree}}&email=vasyl.babych+3@swanteams.com",
									"host": [
										"{{et_host}}"
									],
									"path": [
										"auth",
										"link_tokens",
										"create"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										},
										{
											"key": "app_key",
											"value": "{{app_key_givingtree}}"
										},
										{
											"key": "email",
											"value": "vasyl.babych+3@swanteams.com"
										}
									]
								},
								"description": "Invite a user to the volunteer app. "
							},
							"response": []
						},
						{
							"name": "Auth Status Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Application-Key",
										"value": "ef571795d45d5be4994a3beebbf2fcb9d24466d45cbf6877250ba822420d3c64"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAppToken"
									},
									{
										"key": "Authorization",
										"value": "ODp2X1NIY1EzY3pNelNKaVAtd3NURA=="
									},
									{
										"key": "ET-Update-Source",
										"value": "csv_importer"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/status?oid=1",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"status"
									],
									"query": [
										{
											"key": "oid",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Auth Status Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"postLinkTokensSchema\"))\r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Application-Key",
										"value": "ef571795d45d5be4994a3beebbf2fcb9d24466d45cbf6877250ba822420d3c64"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAppToken"
									},
									{
										"key": "Authorization",
										"value": "ODp2X1NIY1EzY3pNelNKaVAtd3NURA=="
									},
									{
										"key": "ET-Update-Source",
										"value": "csv_importer"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"application\": \"volunteers\",\r\n    \"user_id\": 2324\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/link_tokens?oid=463",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"link_tokens"
									],
									"query": [
										{
											"key": "oid",
											"value": "463"
										},
										{
											"key": "user_id",
											"value": "2308",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Managers",
					"item": [
						{
							"name": "Auth Prime Token auth_api Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"auth_token\", jsonData.token);\r",
											"\r",
											"pm.environment.set(\"session_prime_token\", jsonData.prime_token);\r",
											"pm.environment.set(\"Device-ID\", jsonData.device_id);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "p0o9P)O(p0o9P)O(",
											"type": "string"
										},
										{
											"key": "username",
											"value": "vasyl.babych@evertrue.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "7cb9b8d4451567b725e81b998cdf46cfc58426f9936916c714acddbc9f082546",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueBasicAuth",
										"type": "text"
									},
									{
										"key": "host",
										"value": "stage-api.evertrue.com",
										"type": "text"
									},
									{
										"key": "Device-ID",
										"value": "{{Device-ID}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/session",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"session"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET managers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"getManagersSchema\"))\r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/managers?oid=158",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"managers"
									],
									"query": [
										{
											"key": "oid",
											"value": "158"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post manager",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"getManagerIdSchema\"))\r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"managerId\", jsonData.id);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"employee_id\": 2308,\r\n    \"manager_id\": 2308\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/managers?oid=463",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"managers"
									],
									"query": [
										{
											"key": "oid",
											"value": "463"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET manager id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"getManagerIdSchema\"))\r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/managers/{{managerId}}?oid=463",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"managers",
										"{{managerId}}"
									],
									"query": [
										{
											"key": "oid",
											"value": "463"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post manager Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"employee_id\": 2308,\r\n    \"manager_id\": 2308\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/managers/{{managerId}}?oid=463",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"managers",
										"{{managerId}}"
									],
									"query": [
										{
											"key": "oid",
											"value": "463"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Restriction Endpoint",
					"item": [
						{
							"name": "Auth Prime Token auth_api Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"auth_token\", jsonData.token);\r",
											"\r",
											"pm.environment.set(\"session_prime_token\", jsonData.prime_token);\r",
											"pm.environment.set(\"Device-ID\", jsonData.device_id);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "p0o9P)O(p0o9P)O(",
											"type": "string"
										},
										{
											"key": "username",
											"value": "vasyl.babych@evertrue.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "7cb9b8d4451567b725e81b998cdf46cfc58426f9936916c714acddbc9f082546",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueBasicAuth",
										"type": "text"
									},
									{
										"key": "host",
										"value": "stage-api.evertrue.com",
										"type": "text"
									},
									{
										"key": "Device-ID",
										"value": "{{Device-ID}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/session",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"session"
									],
									"query": [
										{
											"key": null,
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET restrictions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"getRestrictionsSchema\"))\r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/restrictions?oid={{et_oid}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"restrictions"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GET restriction Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"getRestrictionIdSchema\"))\r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/restrictions/35?oid={{et_oid}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"restrictions",
										"35"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create restriction for an organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"getRestrictionIdSchema\"))\r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"restrictionId\", jsonData.id);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"restriction\": {\r\n    \"type\": \"SsoRestriction\",\r\n    \"identity_provider_id\": 10\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/restrictions?oid={{et_oid}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"restrictions"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create restriction for an organization Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"getRestrictionIdSchema\"))\r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"restriction\": {\r\n    \"type\": \"SsoRestriction\",\r\n    \"identity_provider_id\": 12\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/restrictions/{{restrictionId}}?oid={{et_oid}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"restrictions",
										"{{restrictionId}}"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create restriction for an organization Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"restriction\": {\r\n    \"type\": \"SsoRestriction\",\r\n    \"identity_provider_id\": 12\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/restrictions/{{restrictionId}}?oid={{et_oid}}",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"restrictions",
										"{{restrictionId}}"
									],
									"query": [
										{
											"key": "oid",
											"value": "{{et_oid}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Versions",
					"item": [
						{
							"name": "Get versions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"getVersionsSchema\"))\r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/versions",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"versions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Version Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response matches the expected schema\", function () {\r",
											"    let schema = JSON.parse(pm.variables.get(\"getVersionIdSchema\"))\r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization-Provider",
										"value": "EvertrueAuthToken",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"type": "text"
									},
									{
										"key": "Application-Key",
										"value": "67f058495b1e266de2cf0b28feb57acec271320653950a4cd1b6d5ade767eef2",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://stage-api.evertrue.com/auth/versions/367639",
									"protocol": "https",
									"host": [
										"stage-api",
										"evertrue",
										"com"
									],
									"path": [
										"auth",
										"versions",
										"367639"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "New Request",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.evertrue.com/auth/session",
							"protocol": "https",
							"host": [
								"api",
								"evertrue",
								"com"
							],
							"path": [
								"auth",
								"session"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth Token (Login) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"auth_token\", jsonData.token);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization-Provider",
								"value": "EvertruePrimeToken"
							},
							{
								"key": "Authorization-Multifactor",
								"value": "1"
							},
							{
								"key": "Application-Key",
								"value": "{{app_key_givingtree}}"
							},
							{
								"key": "Authorization-User-Picker",
								"value": "1"
							},
							{
								"key": "Device-ID",
								"value": "{{auth_device_id}}"
							},
							{
								"key": "Authorization-Trust-Device",
								"value": "1"
							},
							{
								"key": "Authorization",
								"value": "{{prime_token}}"
							}
						],
						"url": {
							"raw": "{{et_host}}/auth/session",
							"host": [
								"{{et_host}}"
							],
							"path": [
								"auth",
								"session"
							]
						},
						"description": "Step 3 in the 2FA process to submit the prime_token to obtain your auth token, which is stored in the global auth_token field.  This step must be run each time you switch environments."
					},
					"response": []
				}
			]
		}
	]
}